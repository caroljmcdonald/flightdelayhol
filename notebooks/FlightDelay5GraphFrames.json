{"paragraphs":[{"text":"%md\n## Analyzing Flight Delays with Apache Spark GraphFrames\nApache Spark GraphX made it possible to run graph algorithms within Spark, GraphFrames integrates GraphX and DataFrames and makes it possible to perform Graph pattern queries without moving data to a specialized graph database.\n\nThis notebook will help you get started using Apache Spark GraphFrames Graph Algorithms and Graph Queries with MapR Database JSON. \n### Overview of Some Graph Concepts\nA graph is a mathematical structure used to model relations between objects. A graph is made up of vertices and edges that connect them. The vertices are the objects, and the edges are the relationships between them.\n<img src=\"https://mapr.com/blog/analyzing-flight-delays-with-apache-spark-graphframes-and-mapr-db/assets/image9.png\" width=\"400\" height=\"400\">\nSpark GraphFrames support graph computation with a distributed property graph. A property graph is a directed multigraph, which can have multiple edges in parallel. Every edge and vertex has user-defined properties associated with it. The parallel edges allow multiple relationships between the same vertices.\n<img src=\"https://mapr.com/blog/analyzing-flight-delays-with-apache-spark-graphframes-and-mapr-db/assets/image28.png\" width=\"400\" height=\"400\">\nWith GraphFrames, vertices and edges are represented as DataFrames, which adds the advantages of querying with Spark SQL and support for DataFrame data sources like Parquet, JSON, CSV, and also MapR-DB with the MapR-DB Spark Connector.\n","user":"anonymous","dateUpdated":"2019-03-12T22:05:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552427234238_1648524104","id":"20190312-214714_493983904","dateCreated":"2019-03-12T21:47:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:25412","dateFinished":"2019-03-12T22:01:57+0000","dateStarted":"2019-03-12T22:01:57+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Analyzing Flight Delays with Apache Spark GraphFrames</h2>\n<p>Apache Spark GraphX made it possible to run graph algorithms within Spark, GraphFrames integrates GraphX and DataFrames and makes it possible to perform Graph pattern queries without moving data to a specialized graph database.</p>\n<p>This notebook will help you get started using Apache Spark GraphFrames Graph Algorithms and Graph Queries with MapR Database JSON. </p>\n<h3>Overview of Some Graph Concepts</h3>\n<p>A graph is a mathematical structure used to model relations between objects. A graph is made up of vertices and edges that connect them. The vertices are the objects, and the edges are the relationships between them.<br/><img src=\"https://mapr.com/blog/analyzing-flight-delays-with-apache-spark-graphframes-and-mapr-db/assets/image9.png\" width=\"400\" height=\"400\"><br/>Spark GraphFrames support graph computation with a distributed property graph. A property graph is a directed multigraph, which can have multiple edges in parallel. Every edge and vertex has user-defined properties associated with it. The parallel edges allow multiple relationships between the same vertices.<br/><img src=\"https://mapr.com/blog/analyzing-flight-delays-with-apache-spark-graphframes-and-mapr-db/assets/image28.png\" width=\"400\" height=\"400\"><br/>With GraphFrames, vertices and edges are represented as DataFrames, which adds the advantages of querying with Spark SQL and support for DataFrame data sources like Parquet, JSON, CSV, and also MapR-DB with the MapR-DB Spark Connector.</p>\n</div>"}]}},{"title":"Import needed packages","text":"%spark\nimport org.apache.spark.graphx._\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.types.StructType\nimport org.graphframes._\nimport org.graphframes.lib.AggregateMessages\n\n\n","user":"anonymous","dateUpdated":"2019-03-12T21:37:29+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.graphx._\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.types.StructType\nimport org.graphframes._\nimport org.graphframes.lib.AggregateMessages\n"}]},"apps":[],"jobName":"paragraph_1552425966454_1427701063","id":"20170508-144514_403247535","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12622","dateFinished":"2019-03-12T21:37:30+0000","dateStarted":"2019-03-12T21:37:29+0000"},{"text":"%md \nLoading The Flight MapR Datbase Table Data into a Spark Dataset\nIn our use case Edges are the flights between airports. An edge must have src and dst columns and can have multiple relationship columns. In our example, an edge consists of:\n\n{\"id\":\"ATL_BOS_2018-01-01_DL_104\",\n\"fldate\":\"2018-01-01\",\n\"month\":1,\n\"dofW\":1,\n\"carrier\":\"DL\",\n\"src\":\"ATL\",\n\"dst\":\"BOS\",\n\"crsdephour\":9,\n\"crsdeptime\":850,\n\"depdelay\":0.0,\n\"crsarrtime\":1116,\n\"arrdelay\":0.0,\n\"crselapsedtime\":146.0,\n\"dist\":946.0}\n\nWe use a Scala case class and Structype to define the schema, corresponding to a row in MapR Database  JSON ","user":"anonymous","dateUpdated":"2019-03-12T21:54:04+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Loading The Flight MapR Datbase Table Data into a Spark Dataset<br/>In our use case Edges are the flights between airports. An edge must have src and dst columns and can have multiple relationship columns. In our example, an edge consists of:</p>\n<p>{&ldquo;id&rdquo;:&ldquo;ATL_BOS_2018-01-01_DL_104&rdquo;,<br/>&ldquo;fldate&rdquo;:&ldquo;2018-01-01&rdquo;,<br/>&ldquo;month&rdquo;:1,<br/>&ldquo;dofW&rdquo;:1,<br/>&ldquo;carrier&rdquo;:&ldquo;DL&rdquo;,<br/>&ldquo;src&rdquo;:&ldquo;ATL&rdquo;,<br/>&ldquo;dst&rdquo;:&ldquo;BOS&rdquo;,<br/>&ldquo;crsdephour&rdquo;:9,<br/>&ldquo;crsdeptime&rdquo;:850,<br/>&ldquo;depdelay&rdquo;:0.0,<br/>&ldquo;crsarrtime&rdquo;:1116,<br/>&ldquo;arrdelay&rdquo;:0.0,<br/>&ldquo;crselapsedtime&rdquo;:146.0,<br/>&ldquo;dist&rdquo;:946.0}</p>\n<p>We use a Scala case class and Structype to define the schema, corresponding to a row in MapR Database JSON</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1552425966455_1639552704","id":"20170530-122945_1594214131","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12623","dateFinished":"2019-03-12T21:54:04+0000","dateStarted":"2019-03-12T21:54:04+0000"},{"text":"%spark\n// scala case class\ncase class Flight(id: String,fldate: String,month:Integer, dofW: Integer,carrier: String, src: String,dst: String, crsdephour: Integer, crsdeptime: Integer,depdelay: Double, crsarrtime: Integer, arrdelay: Double, crselapsedtime: Double, dist:Double,orig_dest: String, label: Double, prediction: Double)\n","user":"anonymous","dateUpdated":"2019-03-12T21:37:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Flight\n"}]},"apps":[],"jobName":"paragraph_1552425966455_-1766904706","id":"20190312-205015_1334032279","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12624","dateFinished":"2019-03-12T21:37:38+0000","dateStarted":"2019-03-12T21:37:37+0000"},{"title":"Define Schema for JSON file data","text":"\n  \nval schema = StructType(Array(\n    StructField(\"id\", StringType, true),\n    StructField(\"fldate\", StringType, true),\n    StructField(\"month\", IntegerType, true),\n    StructField(\"dofW\", IntegerType, true),\n    StructField(\"carrier\", StringType, true),\n    StructField(\"src\", StringType, true),\n    StructField(\"dst\", StringType, true),\n    StructField(\"crsdephour\", IntegerType, true),\n    StructField(\"crsdeptime\", IntegerType, true),\n    StructField(\"depdelay\", DoubleType, true),\n    StructField(\"crsarrtime\", IntegerType, true),\n    StructField(\"arrdelay\", DoubleType, true),\n    StructField(\"crselapsedtime\", DoubleType, true),\n    StructField(\"dist\", DoubleType, true),\n    StructField(\"orig_dest\", StringType, true),\n    StructField(\"label\", DoubleType, true),\n    StructField(\"prediction\", DoubleType, true)\n  ))","user":"anonymous","dateUpdated":"2019-03-12T21:37:41+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"schema: org.apache.spark.sql.types.StructType = StructType(StructField(id,StringType,true), StructField(fldate,StringType,true), StructField(month,IntegerType,true), StructField(dofW,IntegerType,true), StructField(carrier,StringType,true), StructField(src,StringType,true), StructField(dst,StringType,true), StructField(crsdephour,IntegerType,true), StructField(crsdeptime,IntegerType,true), StructField(depdelay,DoubleType,true), StructField(crsarrtime,IntegerType,true), StructField(arrdelay,DoubleType,true), StructField(crselapsedtime,DoubleType,true), StructField(dist,DoubleType,true), StructField(orig_dest,StringType,true), StructField(label,DoubleType,true), StructField(prediction,DoubleType,true))\n"}]},"apps":[],"jobName":"paragraph_1552425966455_2095889997","id":"20170508-150032_326029627","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12625","dateFinished":"2019-03-12T21:37:42+0000","dateStarted":"2019-03-12T21:37:41+0000"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552428452363_-1476112837","id":"20190312-220732_1927215136","dateCreated":"2019-03-12T22:07:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:25919","text":"%md\nTo load data from a MapR Database JSON table into an Apache Spark Dataset, we invoke the loadFromMapRDB method on a SparkSession object, providing the tableName, schema, and case class. This returns a Dataset of Flight objects:","dateUpdated":"2019-03-12T22:07:45+0000","dateFinished":"2019-03-12T22:07:45+0000","dateStarted":"2019-03-12T22:07:45+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>To load data from a MapR Database JSON table into an Apache Spark Dataset, we invoke the loadFromMapRDB method on a SparkSession object, providing the tableName, schema, and case class. This returns a Dataset of Flight objects:</p>\n</div>"}]}},{"title":"Read the data from MapR-DB into a Dataset of type Flight","text":"import com.mapr.db._\nimport com.mapr.db.spark._\nimport com.mapr.db.spark.impl._\nimport com.mapr.db.spark.sql._\n\n val spark: SparkSession = SparkSession.builder().appName(\"flightread\").getOrCreate()\n\n var tableName: String = \"/user/mapr/flighttable\"\n \n // load dataset from MapR-DB \nval df = spark.sparkSession.loadFromMapRDB[Flight](tableName, schema)\n","user":"anonymous","dateUpdated":"2019-03-12T21:37:48+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.mapr.db._\nimport com.mapr.db.spark._\nimport com.mapr.db.spark.impl._\nimport com.mapr.db.spark.sql._\nspark: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@43c4fa64\ntableName: String = /user/mapr/flighttable\ndf: org.apache.spark.sql.DataFrame = [id: string, fldate: string ... 15 more fields]\n"}]},"apps":[],"jobName":"paragraph_1552425966455_1099221264","id":"20170508-150131_378637203","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12626","dateFinished":"2019-03-12T21:37:49+0000","dateStarted":"2019-03-12T21:37:48+0000"},{"title":"Print DataFrame Schema","text":"df.cache\ndf.count()\ndf.createOrReplaceTempView(\"flights\")\ndf.printSchema","user":"anonymous","dateUpdated":"2019-03-12T21:37:57+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: string (nullable = true)\n |-- fldate: string (nullable = true)\n |-- month: integer (nullable = true)\n |-- dofW: integer (nullable = true)\n |-- carrier: string (nullable = true)\n |-- src: string (nullable = true)\n |-- dst: string (nullable = true)\n |-- crsdephour: integer (nullable = true)\n |-- crsdeptime: integer (nullable = true)\n |-- depdelay: double (nullable = true)\n |-- crsarrtime: integer (nullable = true)\n |-- arrdelay: double (nullable = true)\n |-- crselapsedtime: double (nullable = true)\n |-- dist: double (nullable = true)\n |-- orig_dest: string (nullable = true)\n |-- label: double (nullable = true)\n |-- prediction: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1552425966456_-287944543","id":"20171129-223643_463511351","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12627","dateFinished":"2019-03-12T21:38:07+0000","dateStarted":"2019-03-12T21:37:57+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=407"],"interpreterSettingId":"spark"}}},{"title":"Show the first 5 rows of the Dataset","text":"df.show(5)","user":"anonymous","dateUpdated":"2019-03-12T21:38:11+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+-----+---------+-----+----------+\n|                  id|    fldate|month|dofW|carrier|src|dst|crsdephour|crsdeptime|depdelay|crsarrtime|arrdelay|crselapsedtime| dist|orig_dest|label|prediction|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+-----+---------+-----+----------+\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|         9|       850|     0.0|      1116|     0.0|         146.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        11|      1122|     8.0|      1349|     0.0|         147.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        14|      1356|     9.0|      1623|     0.0|         147.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        16|      1620|     0.0|      1851|     3.0|         151.0|946.0|  ATL_BOS|  0.0|       1.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        19|      1940|     6.0|      2210|     0.0|         150.0|946.0|  ATL_BOS|  0.0|       1.0|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+-----+---------+-----+----------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966456_-964736491","id":"20181102-223018_334588259","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12628","dateFinished":"2019-03-12T21:38:12+0000","dateStarted":"2019-03-12T21:38:11+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=408"],"interpreterSettingId":"spark"}}},{"text":"%md \n### Use Spark SQL to explore the dataset","user":"anonymous","dateUpdated":"2019-03-12T22:08:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Use Spark SQL to explore the dataset</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1552425966456_2024828946","id":"20170603-182655_1680505289","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12629","dateFinished":"2019-03-12T22:08:19+0000","dateStarted":"2019-03-12T22:08:19+0000"},{"title":"Show the Query Plan with projection and filter push down","text":"df.filter($\"depdelay\" > 40).groupBy(\"src\").count.orderBy(desc(\"count\" )).explain","user":"anonymous","dateUpdated":"2019-03-12T21:26:06+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(3) Sort [count#383L DESC NULLS LAST], true, 0\n+- Exchange rangepartitioning(count#383L DESC NULLS LAST, 200)\n   +- *(2) HashAggregate(keys=[src#5], functions=[count(1)])\n      +- Exchange hashpartitioning(src#5, 200)\n         +- *(1) HashAggregate(keys=[src#5], functions=[partial_count(1)])\n            +- *(1) Project [src#5]\n               +- *(1) Filter (isnotnull(depdelay#9) && (depdelay#9 > 40.0))\n                  +- InMemoryTableScan [depdelay#9, src#5], [isnotnull(depdelay#9), (depdelay#9 > 40.0)]\n                        +- InMemoryRelation [id#0, fldate#1, month#2, dofW#3, carrier#4, src#5, dst#6, crsdephour#7, crsdeptime#8, depdelay#9, crsarrtime#10, arrdelay#11, crselapsedtime#12, dist#13, orig_dest#14, label#15, prediction#16], true, 10000, StorageLevel(disk, memory, deserialized, 1 replicas)\n                              +- *(1) Scan MapRDBRelation(/user/mapr/flighttable,StructType(StructField(id,StringType,true), StructField(fldate,StringType,true), StructField(month,IntegerType,true), StructField(dofW,IntegerType,true), StructField(carrier,StringType,true), StructField(src,StringType,true), StructField(dst,StringType,true), StructField(crsdephour,IntegerType,true), StructField(crsdeptime,IntegerType,true), StructField(depdelay,DoubleType,true), StructField(crsarrtime,IntegerType,true), StructField(arrdelay,DoubleType,true), StructField(crselapsedtime,DoubleType,true), StructField(dist,DoubleType,true), StructField(orig_dest,StringType,true), StructField(label,DoubleType,true), StructField(prediction,DoubleType,true)),MapRDBTableScanRDD[0] at RDD at MapRDBBaseRDD.scala:21,InsertOrReplace) [id#0,fldate#1,month#2,dofW#3,carrier#4,src#5,dst#6,crsdephour#7,crsdeptime#8,depdelay#9,crsarrtime#10,arrdelay#11,crselapsedtime#12,dist#13,orig_dest#14,label#15,prediction#16] PushedFilters: [], ReadSchema: struct<id:string,fldate:string,month:int,dofW:int,carrier:string,src:string,dst:string,crsdephour...\n"}]},"apps":[],"jobName":"paragraph_1552425966457_99061119","id":"20181102-203449_1744152050","dateCreated":"2019-03-12T21:26:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12630"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552428229113_-831378162","id":"20190312-220349_1683685639","dateCreated":"2019-03-12T22:03:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:25754","text":"%md\n### Define Vertices\nWe define airports as vertices. Vertices can have properties or attributes associated with them. For each airport, \nwe have the following information:\n\nVertex Table for Airports\nid\tcity\t        state\nSFO\tSan Francisco\tCA\nNote that our dataset contains only a subset of the airports in the USA; below are the airports in our dataset shown on a map.\n\n<img src=\"https://mapr.com/blog/analyzing-flight-delays-with-apache-spark-graphframes-and-mapr-db/assets/image23.png\" width=\"400\" height=\"400\">","dateUpdated":"2019-03-12T22:06:47+0000","dateFinished":"2019-03-12T22:06:47+0000","dateStarted":"2019-03-12T22:06:47+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Define Vertices</h3>\n<p>We define airports as vertices. Vertices can have properties or attributes associated with them. For each airport,<br/>we have the following information:</p>\n<p>Vertex Table for Airports<br/>id city state<br/>SFO San Francisco CA<br/>Note that our dataset contains only a subset of the airports in the USA; below are the airports in our dataset shown on a map.</p>\n<img src=\"https://mapr.com/blog/analyzing-flight-delays-with-apache-spark-graphframes-and-mapr-db/assets/image23.png\" width=\"400\" height=\"400\">\n</div>"}]}},{"title":"Read Airports file for Graph Vertexes","text":"var file2: String = \"/user/mapr/data/airports.json\"\nval airports = spark.read.json(file2)\nairports.createOrReplaceTempView(\"airports\")\nairports.count\nairports.show\n","user":"anonymous","dateUpdated":"2019-03-12T21:38:19+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-------+-----+---+\n|         City|Country|State| id|\n+-------------+-------+-----+---+\n|      Chicago|    USA|   IL|ORD|\n|     New York|    USA|   NY|LGA|\n|       Boston|    USA|   MA|BOS|\n|      Houston|    USA|   TX|IAH|\n|       Newark|    USA|   NJ|EWR|\n|       Denver|    USA|   CO|DEN|\n|        Miami|    USA|   FL|MIA|\n|San Francisco|    USA|   CA|SFO|\n|      Atlanta|    USA|   GA|ATL|\n|       Dallas|    USA|   TX|DFW|\n|    Charlotte|    USA|   NC|CLT|\n|  Los Angeles|    USA|   CA|LAX|\n|      Seattle|    USA|   WA|SEA|\n+-------------+-------+-----+---+\n\nfile2: String = /user/mapr/data/airports.json\nairports: org.apache.spark.sql.DataFrame = [City: string, Country: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1552425966457_-206592092","id":"20170524-223310_2121058884","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12631","dateFinished":"2019-03-12T21:38:20+0000","dateStarted":"2019-03-12T21:38:19+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=409","http://7e407bf8b552:4040/jobs/job?id=410","http://7e407bf8b552:4040/jobs/job?id=411"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552428537228_857303783","id":"20190312-220857_1571670835","dateCreated":"2019-03-12T22:08:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:26051","text":"%md\n### Create the Property Graph\nWe are going to represent the airports as vertices and flights as edges. Below, we create a GraphFrame by supplying a vertex DataFrame and an edge DataFrame. The airports and flights Dataframes are available as the graph.edges and graph.vertices. Since GraphFrame vertices and edges are stored as DataFrames, many queries are just DataFrame (or SQL) queries.","dateUpdated":"2019-03-12T22:09:52+0000","dateFinished":"2019-03-12T22:09:52+0000","dateStarted":"2019-03-12T22:09:52+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Create the Property Graph</h3>\n<p>We are going to represent the airports as vertices and flights as edges. Below, we create a GraphFrame by supplying a vertex DataFrame and an edge DataFrame. The airports and flights Dataframes are available as the graph.edges and graph.vertices. Since GraphFrame vertices and edges are stored as DataFrames, many queries are just DataFrame (or SQL) queries.</p>\n</div>"}]}},{"title":"Create GraphFrame from Airport Vertexes and Flight Edges","text":"val graph = GraphFrame(airports, df)\n\ngraph.vertices.show    ","user":"anonymous","dateUpdated":"2019-03-12T21:38:27+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-------+-----+---+\n|         City|Country|State| id|\n+-------------+-------+-----+---+\n|      Chicago|    USA|   IL|ORD|\n|     New York|    USA|   NY|LGA|\n|       Boston|    USA|   MA|BOS|\n|      Houston|    USA|   TX|IAH|\n|       Newark|    USA|   NJ|EWR|\n|       Denver|    USA|   CO|DEN|\n|        Miami|    USA|   FL|MIA|\n|San Francisco|    USA|   CA|SFO|\n|      Atlanta|    USA|   GA|ATL|\n|       Dallas|    USA|   TX|DFW|\n|    Charlotte|    USA|   NC|CLT|\n|  Los Angeles|    USA|   CA|LAX|\n|      Seattle|    USA|   WA|SEA|\n+-------------+-------+-----+---+\n\ngraph: org.graphframes.GraphFrame = GraphFrame(v:[id: string, City: string ... 2 more fields], e:[src: string, dst: string ... 15 more fields])\n"}]},"apps":[],"jobName":"paragraph_1552425966457_-453919865","id":"20170603-185445_276463997","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12632","dateFinished":"2019-03-12T21:38:28+0000","dateStarted":"2019-03-12T21:38:27+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=412"],"interpreterSettingId":"spark"}}},{"title":"Show rows for GraphFrame edges","text":"graph.edges.show","user":"anonymous","dateUpdated":"2019-03-12T21:38:38+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+-----+---------+-----+----------+\n|                  id|    fldate|month|dofW|carrier|src|dst|crsdephour|crsdeptime|depdelay|crsarrtime|arrdelay|crselapsedtime| dist|orig_dest|label|prediction|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+-----+---------+-----+----------+\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|         9|       850|     0.0|      1116|     0.0|         146.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        11|      1122|     8.0|      1349|     0.0|         147.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        14|      1356|     9.0|      1623|     0.0|         147.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        16|      1620|     0.0|      1851|     3.0|         151.0|946.0|  ATL_BOS|  0.0|       1.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        19|      1940|     6.0|      2210|     0.0|         150.0|946.0|  ATL_BOS|  0.0|       1.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        12|      1248|     0.0|      1513|     0.0|         145.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        22|      2215|     0.0|        39|     0.0|         144.0|946.0|  ATL_BOS|  0.0|       1.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        15|      1500|    21.0|      1734|    33.0|         154.0|946.0|  ATL_BOS|  0.0|       1.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     WN|ATL|BOS|        15|      1500|   198.0|      1725|   208.0|         145.0|946.0|  ATL_BOS|  1.0|       1.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     WN|ATL|BOS|        21|      2055|    14.0|      2330|     0.0|         155.0|946.0|  ATL_BOS|  0.0|       1.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     WN|ATL|BOS|        10|      1015|   215.0|      1250|   191.0|         155.0|946.0|  ATL_BOS|  1.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|         9|       850|     9.0|      1116|     0.0|         146.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        11|      1123|     0.0|      1350|     0.0|         147.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        10|      1000|    22.0|      1232|    10.0|         152.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        14|      1356|     6.0|      1623|    21.0|         147.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        22|      2227|     8.0|        51|     0.0|         144.0|946.0|  ATL_BOS|  0.0|       1.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        16|      1620|     0.0|      1851|     0.0|         151.0|946.0|  ATL_BOS|  0.0|       1.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        19|      1940|    62.0|      2210|    50.0|         150.0|946.0|  ATL_BOS|  1.0|       1.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        12|      1248|    15.0|      1513|     7.0|         145.0|946.0|  ATL_BOS|  0.0|       0.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        21|      2107|    12.0|      2335|    29.0|         148.0|946.0|  ATL_BOS|  0.0|       1.0|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+-----+---------+-----+----------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966458_645830849","id":"20181030-221444_1694311441","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12633","dateFinished":"2019-03-12T21:38:39+0000","dateStarted":"2019-03-12T21:38:38+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=413"],"interpreterSettingId":"spark"}}},{"text":"%md\n### Now we can query the GraphFrame\n\n","user":"anonymous","dateUpdated":"2019-03-12T22:10:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Now we can query the GraphFrame</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1552425966458_244483111","id":"20170601-154525_1033166149","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12634","dateFinished":"2019-03-12T22:10:13+0000","dateStarted":"2019-03-12T22:10:13+0000"},{"title":"How many flights are in the data set? ","text":"graph.edges.count\n\n","user":"anonymous","dateUpdated":"2019-03-12T21:38:57+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res20: Long = 282628\n"}]},"apps":[],"jobName":"paragraph_1552425966459_1956028427","id":"20181101-222740_1114775938","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12635","dateFinished":"2019-03-12T21:38:58+0000","dateStarted":"2019-03-12T21:38:57+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=414"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552426747044_-239836305","id":"20190312-213907_1801508223","dateCreated":"2019-03-12T21:39:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20180","text":"graph.vertices.count\n\n","dateUpdated":"2019-03-12T21:39:25+0000","dateFinished":"2019-03-12T21:39:26+0000","dateStarted":"2019-03-12T21:39:25+0000","title":"How many airports are in the data set? ","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res21: Long = 13\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=415"],"interpreterSettingId":"spark"}}},{"title":"What are the longest delays for  flights  that are greater than  1500 miles in  distance?","text":"graph.edges.filter(\"dist > 1500\").orderBy(desc(\"depdelay\")).show(5)\n","user":"anonymous","dateUpdated":"2019-03-12T21:39:32+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+------+---------+-----+----------+\n|                  id|    fldate|month|dofW|carrier|src|dst|crsdephour|crsdeptime|depdelay|crsarrtime|arrdelay|crselapsedtime|  dist|orig_dest|label|prediction|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+------+---------+-----+----------+\n|BOS_DFW_2018-06-2...|2018-06-28|    6|   4|     AA|BOS|DFW|        10|      1012|  1345.0|      1326|  1332.0|         254.0|1562.0|  BOS_DFW|  1.0|       0.0|\n|LAX_MIA_2018-07-0...|2018-07-09|    7|   1|     AA|LAX|MIA|         9|       945|  1283.0|      1811|  1373.0|         326.0|2342.0|  LAX_MIA|  1.0|       0.0|\n|BOS_LAX_2018-03-2...|2018-03-28|    3|   3|     AA|BOS|LAX|        10|      1040|  1242.0|      1427|  1234.0|         407.0|2611.0|  BOS_LAX|  1.0|       0.0|\n|DEN_EWR_2018-07-2...|2018-07-20|    7|   5|     UA|DEN|EWR|        11|      1117|  1125.0|      1713|  1106.0|         236.0|1605.0|  DEN_EWR|  1.0|       1.0|\n|SEA_DFW_2018-07-1...|2018-07-10|    7|   2|     AA|SEA|DFW|        15|      1528|  1103.0|      2126|  1107.0|         238.0|1660.0|  SEA_DFW|  1.0|       0.0|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+------+---------+-----+----------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966459_861454896","id":"20170508-151557_1422077156","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12636","dateFinished":"2019-03-12T21:39:33+0000","dateStarted":"2019-03-12T21:39:32+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=416"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552428643696_1283415956","id":"20190312-221043_280942304","dateCreated":"2019-03-12T22:10:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:26192","text":"%md\nProjection and filter push down into MapR-DB\n\nYou can see the physical plan for a DataFrame query by calling the explain method shown below. Here  we see projection and filter push down, which means that the scanning of the src, dst and depdelay columns and the filter on the depdelay column are pushed down into MapR-DB, which means that the scanning and filtering will take place in MapR-DB before returning the data to Spark. Projection pushdown minimizes data transfer between MapR-DB and the Spark engine by omitting unnecessary fields from table scans. It is especially beneficial when a table contains many columns. Filter pushdown improves performance by reducing the amount of data passed between MapR-DB and the Spark engine when filtering data.","dateUpdated":"2019-03-12T22:11:10+0000","dateFinished":"2019-03-12T22:11:10+0000","dateStarted":"2019-03-12T22:11:10+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Projection and filter push down into MapR-DB</p>\n<p>You can see the physical plan for a DataFrame query by calling the explain method shown below. Here we see projection and filter push down, which means that the scanning of the src, dst and depdelay columns and the filter on the depdelay column are pushed down into MapR-DB, which means that the scanning and filtering will take place in MapR-DB before returning the data to Spark. Projection pushdown minimizes data transfer between MapR-DB and the Spark engine by omitting unnecessary fields from table scans. It is especially beneficial when a table contains many columns. Filter pushdown improves performance by reducing the amount of data passed between MapR-DB and the Spark engine when filtering data.</p>\n</div>"}]}},{"title":"Show Query Plan with Filter push down","text":"graph.edges.filter(\"dist > 1500\").orderBy(desc(\"depdelay\")).explain","user":"anonymous","dateUpdated":"2019-03-12T21:39:46+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(2) Sort [depdelay#19327 DESC NULLS LAST], true, 0\n+- Exchange rangepartitioning(depdelay#19327 DESC NULLS LAST, 200)\n   +- *(1) Filter (isnotnull(dist#19331) && (dist#19331 > 1500.0))\n      +- InMemoryTableScan [id#19318, fldate#19319, month#19320, dofW#19321, carrier#19322, src#19323, dst#19324, crsdephour#19325, crsdeptime#19326, depdelay#19327, crsarrtime#19328, arrdelay#19329, crselapsedtime#19330, dist#19331, orig_dest#19332, label#19333, prediction#19334], [isnotnull(dist#19331), (dist#19331 > 1500.0)]\n            +- InMemoryRelation [id#19318, fldate#19319, month#19320, dofW#19321, carrier#19322, src#19323, dst#19324, crsdephour#19325, crsdeptime#19326, depdelay#19327, crsarrtime#19328, arrdelay#19329, crselapsedtime#19330, dist#19331, orig_dest#19332, label#19333, prediction#19334], true, 10000, StorageLevel(disk, memory, deserialized, 1 replicas)\n                  +- *(1) Scan MapRDBRelation(/user/mapr/flighttable,StructType(StructField(id,StringType,true), StructField(fldate,StringType,true), StructField(month,IntegerType,true), StructField(dofW,IntegerType,true), StructField(carrier,StringType,true), StructField(src,StringType,true), StructField(dst,StringType,true), StructField(crsdephour,IntegerType,true), StructField(crsdeptime,IntegerType,true), StructField(depdelay,DoubleType,true), StructField(crsarrtime,IntegerType,true), StructField(arrdelay,DoubleType,true), StructField(crselapsedtime,DoubleType,true), StructField(dist,DoubleType,true), StructField(orig_dest,StringType,true), StructField(label,DoubleType,true), StructField(prediction,DoubleType,true)),MapRDBTableScanRDD[2170] at RDD at MapRDBBaseRDD.scala:21,InsertOrReplace) [id#19318,fldate#19319,month#19320,dofW#19321,carrier#19322,src#19323,dst#19324,crsdephour#19325,crsdeptime#19326,depdelay#19327,crsarrtime#19328,arrdelay#19329,crselapsedtime#19330,dist#19331,orig_dest#19332,label#19333,prediction#19334] PushedFilters: [], ReadSchema: struct<id:string,fldate:string,month:int,dofW:int,carrier:string,src:string,dst:string,crsdephour...\n"}]},"apps":[],"jobName":"paragraph_1552425966460_-272337671","id":"20181105-211111_1305262136","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12637","dateFinished":"2019-03-12T21:39:46+0000","dateStarted":"2019-03-12T21:39:46+0000"},{"title":" Show the longest and shortest distance routes","text":"graph.edges.groupBy(\"src\", \"dst\").max(\"dist\").sort(desc(\"max(dist)\")).show(4)\n\ngraph.edges.groupBy(\"src\", \"dst\").min(\"dist\").sort((\"min(dist)\")).show(4)","user":"anonymous","dateUpdated":"2019-03-12T21:39:52+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---+---------+\n|src|dst|max(dist)|\n+---+---+---------+\n|MIA|SEA|   2724.0|\n|SEA|MIA|   2724.0|\n|BOS|SFO|   2704.0|\n|SFO|BOS|   2704.0|\n+---+---+---------+\nonly showing top 4 rows\n\n+---+---+---------+\n|src|dst|min(dist)|\n+---+---+---------+\n|BOS|LGA|    184.0|\n|LGA|BOS|    184.0|\n|EWR|BOS|    200.0|\n|BOS|EWR|    200.0|\n+---+---+---------+\nonly showing top 4 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966460_280066065","id":"20170508-151903_1365343172","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12638","dateFinished":"2019-03-12T21:39:56+0000","dateStarted":"2019-03-12T21:39:52+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=417","http://7e407bf8b552:4040/jobs/job?id=418"],"interpreterSettingId":"spark"}}},{"title":"Which flight routes have the highest average delay  ?","text":"graph.edges.groupBy(\"src\", \"dst\").avg(\"depdelay\").sort(desc(\"avg(depdelay)\")).show(5)","user":"anonymous","dateUpdated":"2019-03-12T21:40:05+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---+------------------+\n|src|dst|     avg(depdelay)|\n+---+---+------------------+\n|ATL|EWR|25.520159946684437|\n|DEN|EWR|25.232164449818622|\n|MIA|SFO|24.785953177257525|\n|MIA|EWR|22.464104423495286|\n|IAH|EWR| 22.38344914718888|\n+---+---+------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966461_-290561147","id":"20171129-113112_994877662","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12639","dateFinished":"2019-03-12T21:40:07+0000","dateStarted":"2019-03-12T21:40:05+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=419"],"interpreterSettingId":"spark"}}},{"title":"Count of departure delays by Origin and destination, where delay > 40 minutes ","text":"graph.edges.filter(\"depdelay > 40\").groupBy(\"src\", \"dst\").agg(count(\"depdelay\").as(\"flightcount\")).sort(desc(\"flightcount\")).show(5)\n","user":"anonymous","dateUpdated":"2019-03-12T21:40:14+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---+-----------+\n|src|dst|flightcount|\n+---+---+-----------+\n|ORD|LGA|        588|\n|LAX|SFO|        578|\n|ATL|EWR|        561|\n|LGA|ORD|        532|\n|ORD|SFO|        470|\n+---+---+-----------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966461_-2016335732","id":"20171122-232203_359528816","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12640","dateFinished":"2019-03-12T21:40:16+0000","dateStarted":"2019-03-12T21:40:14+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=420"],"interpreterSettingId":"spark"}}},{"title":"What are the longest delays for flights ?","text":"graph.edges.filter(\"depdelay > 1\").sort(desc(\"depdelay\")).show(5)","user":"anonymous","dateUpdated":"2019-03-12T21:26:06+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+------+---------+-----+----------+\n|                  id|    fldate|month|dofW|carrier|src|dst|crsdephour|crsdeptime|depdelay|crsarrtime|arrdelay|crselapsedtime|  dist|orig_dest|label|prediction|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+------+---------+-----+----------+\n|IAH_MIA_2018-03-1...|2018-03-16|    3|   5|     AA|IAH|MIA|        11|      1124|  1559.0|      1448|  1576.0|         144.0| 964.0|  IAH_MIA|  1.0|       0.0|\n|IAH_DFW_2018-05-3...|2018-05-30|    5|   3|     AA|IAH|DFW|        18|      1825|  1445.0|      1943|  1473.0|          78.0| 224.0|  IAH_DFW|  1.0|       0.0|\n|BOS_DFW_2018-06-2...|2018-06-28|    6|   4|     AA|BOS|DFW|        10|      1012|  1345.0|      1326|  1332.0|         254.0|1562.0|  BOS_DFW|  1.0|       0.0|\n|BOS_ORD_2018-01-1...|2018-01-11|    1|   4|     UA|BOS|ORD|         9|       915|  1334.0|      1111|  1367.0|         176.0| 867.0|  BOS_ORD|  1.0|       0.0|\n|LAX_MIA_2018-07-0...|2018-07-09|    7|   1|     AA|LAX|MIA|         9|       945|  1283.0|      1811|  1373.0|         326.0|2342.0|  LAX_MIA|  1.0|       0.0|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+------+---------+-----+----------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966462_1366334184","id":"20181101-192749_2068891424","dateCreated":"2019-03-12T21:26:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12641"},{"title":"What are the longest delays for flights that are greater than 1500 miles in  distance?","text":"graph.edges.filter(\"dist > 1500\").orderBy(desc(\"depdelay\")).show(5)","user":"anonymous","dateUpdated":"2019-03-12T21:40:25+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+------+---------+-----+----------+\n|                  id|    fldate|month|dofW|carrier|src|dst|crsdephour|crsdeptime|depdelay|crsarrtime|arrdelay|crselapsedtime|  dist|orig_dest|label|prediction|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+------+---------+-----+----------+\n|BOS_DFW_2018-06-2...|2018-06-28|    6|   4|     AA|BOS|DFW|        10|      1012|  1345.0|      1326|  1332.0|         254.0|1562.0|  BOS_DFW|  1.0|       0.0|\n|LAX_MIA_2018-07-0...|2018-07-09|    7|   1|     AA|LAX|MIA|         9|       945|  1283.0|      1811|  1373.0|         326.0|2342.0|  LAX_MIA|  1.0|       0.0|\n|BOS_LAX_2018-03-2...|2018-03-28|    3|   3|     AA|BOS|LAX|        10|      1040|  1242.0|      1427|  1234.0|         407.0|2611.0|  BOS_LAX|  1.0|       0.0|\n|DEN_EWR_2018-07-2...|2018-07-20|    7|   5|     UA|DEN|EWR|        11|      1117|  1125.0|      1713|  1106.0|         236.0|1605.0|  DEN_EWR|  1.0|       1.0|\n|SEA_DFW_2018-07-1...|2018-07-10|    7|   2|     AA|SEA|DFW|        15|      1528|  1103.0|      2126|  1107.0|         238.0|1660.0|  SEA_DFW|  1.0|       0.0|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+------+---------+-----+----------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966462_-995203768","id":"20171122-232845_814296940","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12642","dateFinished":"2019-03-12T21:40:27+0000","dateStarted":"2019-03-12T21:40:26+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=421"],"interpreterSettingId":"spark"}}},{"title":"What is the average delay for delayed flights departing from Atlanta?","text":"graph.edges.filter(\"src = 'ATL' and depdelay > 1\").groupBy(\"src\", \"dst\").avg(\"depdelay\").sort(desc(\"avg(depdelay)\")).show\n","user":"anonymous","dateUpdated":"2019-03-12T21:26:06+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---+------------------+\n|src|dst|     avg(depdelay)|\n+---+---+------------------+\n|ATL|EWR|  58.1085801063022|\n|ATL|ORD| 46.42393736017897|\n|ATL|DFW|39.454460966542754|\n|ATL|LGA| 39.25498489425982|\n|ATL|CLT| 37.56777108433735|\n|ATL|SFO| 36.83008356545961|\n|ATL|MIA| 36.40260950605778|\n|ATL|IAH|  34.6390977443609|\n|ATL|BOS| 34.28295254833041|\n|ATL|DEN|30.825997952917092|\n|ATL|SEA| 28.90960451977401|\n|ATL|LAX| 27.19949012109624|\n+---+---+------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1552425966462_-1090054276","id":"20170508-155848_1997894070","dateCreated":"2019-03-12T21:26:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12643"},{"title":"What are the worst hours for delayed flights departing from Atlanta?","text":"z.show(graph.edges.filter(\"src = 'ATL' and depdelay > 1\").groupBy(\"crsdephour\").avg(\"depdelay\").sort(desc(\"avg(depdelay)\")))","user":"anonymous","dateUpdated":"2019-03-12T21:40:49+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"crsdephour","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"avg(depdelay)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"crsdephour\tavg(depdelay)\n23\t52.833333333333336\n18\t51.57142857142857\n19\t48.93338815789474\n17\t48.383354350567465\n16\t44.47976190476191\n12\t39.849673202614376\n20\t39.7953216374269\n22\t38.28431372549019\n21\t37.32309941520468\n14\t37.09466666666667\n15\t35.46127659574468\n13\t32.06132075471698\n6\t31.84051724137931\n11\t30.648\n10\t30.177419354838708\n7\t27.40826873385013\n9\t26.379139072847682\n8\t24.33605220228385\n5\t22.837209302325583\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1552425966463_-1510779673","id":"20181102-211057_1519261046","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12644","dateFinished":"2019-03-12T21:40:48+0000","dateStarted":"2019-03-12T21:40:46+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=422"],"interpreterSettingId":"spark"}}},{"title":"Top Delays from Atlanta","text":"graph.edges.filter(\"src = 'ATL' and depdelay > 40\").select(\"id\",\"depdelay\").sort(desc(\"depdelay\")).show(10)","user":"anonymous","dateUpdated":"2019-03-12T21:42:40+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------+\n|                  id|depdelay|\n+--------------------+--------+\n|ATL_MIA_2018-03-0...|  1158.0|\n|ATL_EWR_2018-07-1...|  1123.0|\n|ATL_ORD_2018-06-2...|  1119.0|\n|ATL_BOS_2018-03-0...|  1086.0|\n|ATL_EWR_2018-07-2...|   952.0|\n|ATL_LAX_2018-07-3...|   902.0|\n|ATL_SFO_2018-07-3...|   862.0|\n|ATL_SFO_2018-07-1...|   842.0|\n|ATL_EWR_2018-07-2...|   841.0|\n|ATL_BOS_2018-03-1...|   826.0|\n+--------------------+--------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966464_-1341159180","id":"20181101-170646_1773284587","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12645","dateFinished":"2019-03-12T21:42:41+0000","dateStarted":"2019-03-12T21:42:40+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=425"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552428910018_329704093","id":"20190312-221510_1524445184","dateCreated":"2019-03-12T22:15:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:26321","text":"%md\n## Vertex Degrees\nThe degree of a vertex is the number of edges that touch the vertex. GraphFrames provides vertex inDegree, outDegree, and degree operations, which determine the number of incoming edges, outgoing edges, and total edges. Using GraphFrames the degree operation we can answer the following questions: ","dateUpdated":"2019-03-12T22:15:47+0000","dateFinished":"2019-03-12T22:15:47+0000","dateStarted":"2019-03-12T22:15:47+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Vertex Degrees</h2>\n<p>The degree of a vertex is the number of edges that touch the vertex. GraphFrames provides vertex inDegree, outDegree, and degree operations, which determine the number of incoming edges, outgoing edges, and total edges. Using GraphFrames the degree operation we can answer the following questions:</p>\n</div>"}]}},{"title":"Which airport has the most incoming flights? ","text":"z.show(graph.inDegrees.orderBy(desc(\"inDegree\")))\n","user":"anonymous","dateUpdated":"2019-03-12T21:43:11+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","inDegree":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"id","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"inDegree","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"id\tinDegree\nORD\t32314\nATL\t30217\nLAX\t26869\nDFW\t24947\nDEN\t23202\nSFO\t22350\nLGA\t20434\nBOS\t18690\nEWR\t18536\nMIA\t18003\nIAH\t17541\nCLT\t16799\nSEA\t12726\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1552425966464_-90949836","id":"20170602-155622_1453197792","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12646","dateFinished":"2019-03-12T21:43:10+0000","dateStarted":"2019-03-12T21:43:08+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=426"],"interpreterSettingId":"spark"}}},{"title":"Which airport has the most outgoing flights?","text":"z.show(graph.outDegrees.orderBy(desc(\"outDegree\")))","user":"anonymous","dateUpdated":"2019-03-12T21:43:21+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","outDegree":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"id","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"outDegree","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"id\toutDegree\nORD\t32072\nATL\t30165\nLAX\t26864\nDFW\t24972\nDEN\t23410\nSFO\t22361\nLGA\t20482\nEWR\t18651\nBOS\t18583\nMIA\t17989\nIAH\t17674\nCLT\t16708\nSEA\t12697\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1552425966465_-60096884","id":"20181015-224231_2027590368","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12647","dateFinished":"2019-03-12T21:43:20+0000","dateStarted":"2019-03-12T21:43:19+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=427"],"interpreterSettingId":"spark"}}},{"title":"What are the highest degree vertexes(most incoming and outgoing flights)?","text":"z.show(graph.degrees.orderBy(desc(\"degree\")))","user":"anonymous","dateUpdated":"2019-03-12T22:16:04+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","degree":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"id","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"degree","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"id\tdegree\nORD\t64386\nATL\t60382\nLAX\t53733\nDFW\t49919\nDEN\t46612\nSFO\t44711\nLGA\t40916\nBOS\t37273\nEWR\t37187\nMIA\t35992\nIAH\t35215\nCLT\t33507\nSEA\t25423\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1552425966465_1157234029","id":"20181004-211413_1357524146","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12648","dateFinished":"2019-03-12T21:44:15+0000","dateStarted":"2019-03-12T21:44:13+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=429"],"interpreterSettingId":"spark"}}},{"title":" Combine the inDegrees method with a DataFrame filter","text":"// show airports with more than 50000 incoming and outgoing flights\ngraph.degrees.filter(\"degree >= 50000\").show","user":"anonymous","dateUpdated":"2019-03-12T22:17:16+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+------+\n| id|degree|\n+---+------+\n|ATL| 60382|\n|ORD| 64386|\n|LAX| 53733|\n+---+------+\n\n"}]},"apps":[],"jobName":"paragraph_1552425966465_1863313076","id":"20181108-002137_398944219","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12649","dateFinished":"2019-03-12T21:44:22+0000","dateStarted":"2019-03-12T21:44:20+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=430","http://7e407bf8b552:4040/jobs/job?id=431","http://7e407bf8b552:4040/jobs/job?id=432","http://7e407bf8b552:4040/jobs/job?id=433","http://7e407bf8b552:4040/jobs/job?id=434"],"interpreterSettingId":"spark"}}},{"title":"What are the 10 most frequent flight routes  in the dataset ?","text":"// What is the count of flights for all possible flight routes, sorted? \n// note we will use the flightroutecount DataFrame later\nval flightroutecount = graph.edges.groupBy(\"src\", \"dst\").count().orderBy(desc(\"count\"))\n// show 10 most frequent flight routes in the data set\nflightroutecount.show(10)","user":"anonymous","dateUpdated":"2019-03-12T22:14:28+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"src":"string","dst":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","stacked":false}},"commonSetting":{},"keys":[{"name":"src","index":0,"aggr":"sum"}],"groups":[{"name":"dst","index":1,"aggr":"sum"}],"values":[{"name":"count","index":2,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+---+-----+\n|src|dst|count|\n+---+---+-----+\n|LGA|ORD| 4442|\n|ORD|LGA| 4426|\n|LAX|SFO| 4406|\n|SFO|LAX| 4354|\n|ATL|LGA| 3884|\n|LGA|ATL| 3869|\n|DEN|LAX| 3671|\n|LAX|DEN| 3661|\n|ORD|LAX| 3524|\n|LAX|ORD| 3510|\n+---+---+-----+\nonly showing top 10 rows\n\nflightroutecount: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [src: string, dst: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1552425966466_1930728357","id":"20181015-213933_2083506099","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12650","dateFinished":"2019-03-12T21:44:37+0000","dateStarted":"2019-03-12T21:44:36+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=435"],"interpreterSettingId":"spark"}}},{"title":"What are the counts for flight routes in the dataset  ?","text":"z.show(flightroutecount)\n","user":"anonymous","dateUpdated":"2019-03-12T21:44:47+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"src":"string","dst":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","stacked":true}},"commonSetting":{},"keys":[{"name":"src","index":0,"aggr":"sum"}],"groups":[{"name":"dst","index":1,"aggr":"sum"}],"values":[{"name":"count","index":2,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"src\tdst\tcount\nLGA\tORD\t4442\nORD\tLGA\t4426\nLAX\tSFO\t4406\nSFO\tLAX\t4354\nATL\tLGA\t3884\nLGA\tATL\t3869\nDEN\tLAX\t3671\nLAX\tDEN\t3661\nORD\tLAX\t3524\nLAX\tORD\t3510\nDFW\tORD\t3488\nORD\tDFW\t3377\nDFW\tATL\t3244\nATL\tDFW\t3238\nATL\tLAX\t3070\nLAX\tATL\t3060\nEWR\tATL\t3016\nSFO\tORD\t3012\nORD\tSFO\t3009\nATL\tEWR\t3001\nLGA\tMIA\t2825\nMIA\tLGA\t2808\nATL\tMIA\t2783\nMIA\tATL\t2781\nORD\tBOS\t2780\nBOS\tORD\t2766\nATL\tCLT\t2666\nORD\tATL\t2658\nLGA\tBOS\t2628\nDFW\tLAX\t2621\nBOS\tLGA\t2619\nLAX\tDFW\t2617\nATL\tORD\t2605\nORD\tDEN\t2596\nDEN\tORD\t2591\nCLT\tATL\t2551\nDEN\tSFO\t2514\nSFO\tDEN\t2503\nDEN\tATL\t2433\nATL\tBOS\t2431\nBOS\tATL\t2422\nATL\tDEN\t2349\nDFW\tDEN\t2233\nIAH\tDFW\t2195\nEWR\tORD\t2195\nEWR\tSFO\t2193\nSFO\tEWR\t2189\nMIA\tORD\t2176\nORD\tMIA\t2162\nDFW\tIAH\t2157\nDEN\tDFW\t2154\nDEN\tSEA\t2100\nSEA\tDEN\t2088\nORD\tEWR\t2030\nSEA\tSFO\t2008\nSFO\tSEA\t2007\nLGA\tDFW\t1971\nDFW\tLGA\t1966\nORD\tIAH\t1938\nSFO\tDFW\t1931\nIAH\tORD\t1931\nIAH\tLAX\t1910\nLAX\tIAH\t1907\nEWR\tLAX\t1896\nORD\tSEA\t1894\nSEA\tORD\t1880\nLAX\tEWR\t1880\nDFW\tCLT\t1867\nCLT\tDFW\t1860\nDFW\tSFO\t1846\nMIA\tDFW\t1817\nDFW\tMIA\t1813\nLGA\tDEN\t1811\nDEN\tLGA\t1797\nDEN\tIAH\t1783\nIAH\tDEN\t1778\nCLT\tORD\t1718\nLAX\tBOS\t1680\nORD\tCLT\t1678\nBOS\tLAX\t1675\nBOS\tEWR\t1663\nEWR\tBOS\t1661\nDEN\tEWR\t1654\nCLT\tLGA\t1654\nLGA\tCLT\t1652\nATL\tSFO\t1608\nSFO\tATL\t1595\nEWR\tIAH\t1590\nIAH\tEWR\t1583\nIAH\tSFO\t1573\nSFO\tIAH\t1566\nSEA\tLAX\t1546\nLAX\tSEA\t1539\nLAX\tMIA\t1532\nMIA\tLAX\t1531\nCLT\tBOS\t1522\nBOS\tCLT\t1493\nEWR\tDEN\t1479\nEWR\tCLT\t1421\nDFW\tSEA\t1418\nCLT\tEWR\t1413\nSEA\tDFW\t1413\nIAH\tATL\t1400\nEWR\tMIA\t1387\nMIA\tEWR\t1379\nSFO\tBOS\t1374\nBOS\tSFO\t1366\nCLT\tMIA\t1338\nATL\tIAH\t1336\nMIA\tCLT\t1330\nLGA\tIAH\t1284\nIAH\tLGA\t1280\nMIA\tBOS\t1242\nBOS\tMIA\t1238\nEWR\tDFW\t1235\nMIA\tIAH\t1226\nIAH\tMIA\t1225\nATL\tSEA\t1194\nSEA\tATL\t1188\nDFW\tEWR\t1167\nDFW\tBOS\t1152\nBOS\tDFW\t1139\nDEN\tBOS\t1139\nIAH\tCLT\t1135\nBOS\tDEN\t1122\nCLT\tIAH\t1095\nLAX\tCLT\t1072\nCLT\tLAX\t1071\nCLT\tDEN\t1019\nDEN\tCLT\t1014\nSFO\tCLT\t932\nCLT\tSFO\t930\nIAH\tSEA\t901\nSFO\tMIA\t898\nSEA\tIAH\t898\nMIA\tSFO\t897\nIAH\tBOS\t763\nBOS\tIAH\t761\nEWR\tSEA\t578\nSEA\tEWR\t577\nMIA\tDEN\t563\nDEN\tMIA\t560\nSEA\tCLT\t539\nCLT\tSEA\t537\nBOS\tSEA\t319\nSEA\tBOS\t318\nSEA\tMIA\t242\nMIA\tSEA\t239\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1552425966466_-68194051","id":"20181101-194122_558041274","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12651","dateFinished":"2019-03-12T21:44:45+0000","dateStarted":"2019-03-12T21:44:44+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=436"],"interpreterSettingId":"spark"}}},{"text":"%md\n### PageRank\nAnother GraphFrames query is PageRank, which is based on the Google PageRank algorithm.\n\nPageRank measures the importance of each vertex in a graph, by determining which verticeshave the most edges with other vertices. In our example, we can use PageRank to determine which airports are the most important, by measuring which airports have the most connections to other airports with lots of connections. We have to specify the probability tolerance, which is the measure of convergence. Note that the results are similar to the degrees operation,but the algorithm is different.","user":"anonymous","dateUpdated":"2019-03-12T22:17:59+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>PageRank</h3>\n<p>Another GraphFrames query is PageRank, which is based on the Google PageRank algorithm.</p>\n<p>PageRank measures the importance of each vertex in a graph, by determining which verticeshave the most edges with other vertices. In our example, we can use PageRank to determine which airports are the most important, by measuring which airports have the most connections to other airports with lots of connections. We have to specify the probability tolerance, which is the measure of convergence. Note that the results are similar to the degrees operation,but the algorithm is different.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1552425966466_-1379259770","id":"20181105-232439_2055515403","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12652","dateFinished":"2019-03-12T22:17:59+0000","dateStarted":"2019-03-12T22:17:59+0000"},{"title":"Use Pagerank to find most important airports","text":"val ranks = graph.pageRank.resetProbability(0.15).maxIter(10).run()\n// PageRank results are in a new column appended to the vertices DataFrame\n\nranks.vertices.orderBy($\"pagerank\".desc).show()","user":"anonymous","dateUpdated":"2019-03-12T21:44:56+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-------+-----+---+------------------+\n|         City|Country|State| id|          pagerank|\n+-------------+-------+-----+---+------------------+\n|      Chicago|    USA|   IL|ORD| 1.421132695625478|\n|      Atlanta|    USA|   GA|ATL|1.3389970164746383|\n|  Los Angeles|    USA|   CA|LAX|1.2010647369509115|\n|       Dallas|    USA|   TX|DFW|1.1270726146978445|\n|       Denver|    USA|   CO|DEN|1.0590628954667447|\n|San Francisco|    USA|   CA|SFO| 1.024613545715222|\n|     New York|    USA|   NY|LGA|0.9449041443648624|\n|       Boston|    USA|   MA|BOS|0.8774889102400271|\n|       Newark|    USA|   NJ|EWR|0.8731704325953235|\n|        Miami|    USA|   FL|MIA|0.8507611366339813|\n|      Houston|    USA|   TX|IAH|0.8350494969577277|\n|    Charlotte|    USA|   NC|CLT|0.8049025258215664|\n|      Seattle|    USA|   WA|SEA|0.6417798484556717|\n+-------------+-------+-----+---+------------------+\n\nranks: org.graphframes.GraphFrame = GraphFrame(v:[id: string, City: string ... 3 more fields], e:[src: string, dst: string ... 16 more fields])\n"}]},"apps":[],"jobName":"paragraph_1552425966466_1412006039","id":"20171107-112947_525619195","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12653","dateFinished":"2019-03-12T21:45:17+0000","dateStarted":"2019-03-12T21:44:56+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=437","http://7e407bf8b552:4040/jobs/job?id=438","http://7e407bf8b552:4040/jobs/job?id=439","http://7e407bf8b552:4040/jobs/job?id=440","http://7e407bf8b552:4040/jobs/job?id=441","http://7e407bf8b552:4040/jobs/job?id=442","http://7e407bf8b552:4040/jobs/job?id=443","http://7e407bf8b552:4040/jobs/job?id=444","http://7e407bf8b552:4040/jobs/job?id=445","http://7e407bf8b552:4040/jobs/job?id=446","http://7e407bf8b552:4040/jobs/job?id=447","http://7e407bf8b552:4040/jobs/job?id=448","http://7e407bf8b552:4040/jobs/job?id=449","http://7e407bf8b552:4040/jobs/job?id=450","http://7e407bf8b552:4040/jobs/job?id=451","http://7e407bf8b552:4040/jobs/job?id=452","http://7e407bf8b552:4040/jobs/job?id=453","http://7e407bf8b552:4040/jobs/job?id=454","http://7e407bf8b552:4040/jobs/job?id=455","http://7e407bf8b552:4040/jobs/job?id=456"],"interpreterSettingId":"spark"}}},{"user":"anonymous","dateUpdated":"2019-03-12T22:20:39+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"results":{},"enabled":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552425966467_-1982163907","id":"20190312-173446_370590597","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12654","dateFinished":"2019-03-12T22:20:39+0000","dateStarted":"2019-03-12T22:20:39+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Message Passing via AggregateMessages</h3>\n<p>Many important graph algorithms are iterative algorithms, since properties of vertices depend on properties of their neighbors, which depend on properties of their neighbors. Pregel is an iterative graph processing model, developed at Google, which uses a sequence of iterations of messages passing between vertices in a graph. GraphFrames provides aggregateMessages, which implements an aggregation message-passing API, based on the Pregel model. GraphFrames aggregateMessages sends messages between vertices and aggregates message values from the neighboring edges and vertices of each vertex.<br/><img src=\"https://mapr.com/blog/analyzing-flight-delays-with-apache-spark-graphframes-and-mapr-db/assets/image19.png\"></p>\n</div>"}]},"text":"%md\n### Message Passing via AggregateMessages\nMany important graph algorithms are iterative algorithms, since properties of vertices depend on properties of their neighbors, which depend on properties of their neighbors. Pregel is an iterative graph processing model, developed at Google, which uses a sequence of iterations of messages passing between vertices in a graph. GraphFrames provides aggregateMessages, which implements an aggregation message-passing API, based on the Pregel model. GraphFrames aggregateMessages sends messages between vertices and aggregates message values from the neighboring edges and vertices of each vertex.\n<img src=\"https://mapr.com/blog/analyzing-flight-delays-with-apache-spark-graphframes-and-mapr-db/assets/image19.png\">"},{"title":"Pregel Aggregate Messages to calculate avg delay","text":"    val AM = AggregateMessages\n    val msgToSrc = AM.edge(\"depdelay\")\n    val agg = {\n      graph.aggregateMessages\n        .sendToSrc(msgToSrc)\n        .agg(avg(AM.msg).as(\"avgdelay\"))\n        .orderBy(desc(\"avgdelay\"))\n        .limit(5)\n    }\n    agg.show()","user":"anonymous","dateUpdated":"2019-03-12T21:45:00+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+------------------+\n| id|          avgdelay|\n+---+------------------+\n|EWR|17.818079459546404|\n|MIA|17.768691978431264|\n|ORD|  16.5199551010227|\n|ATL|15.330084535057185|\n|DFW|15.061909338459074|\n+---+------------------+\n\nAM: org.graphframes.lib.AggregateMessages.type = org.graphframes.lib.AggregateMessages$@79d37fc0\nmsgToSrc: org.apache.spark.sql.Column = edge['depdelay']\nagg: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [id: string, avgdelay: double]\n"}]},"apps":[],"jobName":"paragraph_1552425966467_-1861607260","id":"20171122-091021_1615582434","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12655","dateFinished":"2019-03-12T21:45:20+0000","dateStarted":"2019-03-12T21:45:00+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=457","http://7e407bf8b552:4040/jobs/job?id=458","http://7e407bf8b552:4040/jobs/job?id=459","http://7e407bf8b552:4040/jobs/job?id=460"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552429173826_1517928296","id":"20190312-221933_220803748","dateCreated":"2019-03-12T22:19:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:26625","text":"%md\n### Motif Find for Graph Pattern Queries\nMotif finding searches for structural patterns in a graph. In this example we want to find flights with no direct connection. First we create a subgraph from the flightroutecount DataFrame that we created earlier, which gives us a subgraph with all the possible flight routes. Then we do a find on the pattern shown here to search for flights from a to b and b to c, that do not have a flight from a to c. Finally we use a DataFrame filter to remove duplicates. This shows how Graph queries can be easily combined with DataFrame operations like filter.\n<img src=\"https://mapr.com/blog/analyzing-flight-delays-with-apache-spark-graphframes-and-mapr-db/assets/image8.png\">","dateUpdated":"2019-03-12T22:20:07+0000","dateFinished":"2019-03-12T22:20:07+0000","dateStarted":"2019-03-12T22:20:07+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Motif Find for Graph Pattern Queries</h3>\n<p>Motif finding searches for structural patterns in a graph. In this example we want to find flights with no direct connection. First we create a subgraph from the flightroutecount DataFrame that we created earlier, which gives us a subgraph with all the possible flight routes. Then we do a find on the pattern shown here to search for flights from a to b and b to c, that do not have a flight from a to c. Finally we use a DataFrame filter to remove duplicates. This shows how Graph queries can be easily combined with DataFrame operations like filter.<br/><img src=\"https://mapr.com/blog/analyzing-flight-delays-with-apache-spark-graphframes-and-mapr-db/assets/image8.png\"></p>\n</div>"}]}},{"title":"Motif Find Airports without direct flights","text":"//search flight routes that have a path to (a,b) and a path to (b,c) but not a path to (a,c)\nval temp = GraphFrame(graph.vertices, flightroutecount)\nval res = temp.find(\"(a)-[]->(b); (b)-[]->(c); !(c)-[]->(a)\").filter(\"c.id !=a.id\")\n//res.select($\"a\", $\"c\").distinct.show\nz.show(res.select($\"a\", $\"c\").distinct)","user":"anonymous","dateUpdated":"2019-03-12T21:45:39+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"a":"string","c":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}},"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"a","visible":true,"width":376,"sort":{},"filters":[{}],"pinned":""},{"name":"c","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"a":"string","c":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"a\tc\n[Newark,USA,NJ,EWR]\t[New York,USA,NY,LGA]\n[New York,USA,NY,LGA]\t[Newark,USA,NJ,EWR]\n[Los Angeles,USA,CA,LAX]\t[New York,USA,NY,LGA]\n[New York,USA,NY,LGA]\t[Los Angeles,USA,CA,LAX]\n[New York,USA,NY,LGA]\t[San Francisco,USA,CA,SFO]\n[San Francisco,USA,CA,SFO]\t[New York,USA,NY,LGA]\n[New York,USA,NY,LGA]\t[Seattle,USA,WA,SEA]\n[Seattle,USA,WA,SEA]\t[New York,USA,NY,LGA]\n"},{"type":"TEXT","data":"temp: org.graphframes.GraphFrame = GraphFrame(v:[id: string, City: string ... 2 more fields], e:[src: string, dst: string ... 1 more field])\nres: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [a: struct<City: string, Country: string ... 2 more fields>, b: struct<City: string, Country: string ... 2 more fields> ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1552425966467_163795872","id":"20181030-222252_1713457455","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12656","dateFinished":"2019-03-12T21:45:36+0000","dateStarted":"2019-03-12T21:45:18+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=461","http://7e407bf8b552:4040/jobs/job?id=462","http://7e407bf8b552:4040/jobs/job?id=463","http://7e407bf8b552:4040/jobs/job?id=464","http://7e407bf8b552:4040/jobs/job?id=465","http://7e407bf8b552:4040/jobs/job?id=466","http://7e407bf8b552:4040/jobs/job?id=467","http://7e407bf8b552:4040/jobs/job?id=468","http://7e407bf8b552:4040/jobs/job?id=469"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552429391911_1302781136","id":"20190312-222311_964576587","dateCreated":"2019-03-12T22:23:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:26871","text":"%md\n### Breadth First Search Graph Algorithm\nBreadth-first search (BFS) finds the shortest path from beginning vertices to end vertices. The beginning and end vertices are specified as DataFrame expressions, maxPathLength specifies the limit on the length of paths. Here we see that there are no Direct flights between LAX and LGA","dateUpdated":"2019-03-12T22:23:25+0000","dateFinished":"2019-03-12T22:23:26+0000","dateStarted":"2019-03-12T22:23:25+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Breadth First Search Graph Algorithm</h3>\n<p>Breadth-first search (BFS) finds the shortest path from beginning vertices to end vertices. The beginning and end vertices are specified as DataFrame expressions, maxPathLength specifies the limit on the length of paths. Here we see that there are no Direct flights between LAX and LGA</p>\n</div>"}]}},{"title":"Breadth First Search for Direct Flights between LAX and LGA","text":"//Breadth First Search for Direcct Flights between LAX and LGA\n//Here we set the maxPathLength to 1 \n//The results show no direct flights \nval paths = graph.bfs.fromExpr(\"id = 'LAX'\").toExpr(\"id = 'LGA'\").maxPathLength(1).run()\npaths.show()","user":"anonymous","dateUpdated":"2019-03-12T22:28:28+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"paths: org.apache.spark.sql.DataFrame = [City: string, Country: string ... 2 more fields]\n+----+-------+-----+---+\n|City|Country|State| id|\n+----+-------+-----+---+\n+----+-------+-----+---+\n\n"}]},"apps":[],"jobName":"paragraph_1552425966467_807275603","id":"20181101-174346_1164844988","dateCreated":"2019-03-12T21:26:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12657"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552429773351_1963449860","id":"20190312-222933_1019304530","dateCreated":"2019-03-12T22:29:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:26998","text":"%md\nYou can combine motif searching with DataFrames operations. Here we want to find connecting flights between \nLAX and LGA using a Motif find query. We use a Motif query to search for the pattern of a flying to b , connecting through c,\nthen we use a DataFrame filter on the the results for A=LAX and C=LGA . \nThe results show some flights connecting through IAH for flights from LAX to LGA .","dateUpdated":"2019-03-12T22:30:00+0000","dateFinished":"2019-03-12T22:30:00+0000","dateStarted":"2019-03-12T22:30:00+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>You can combine motif searching with DataFrames operations. Here we want to find connecting flights between<br/>LAX and LGA using a Motif find query. We use a Motif query to search for the pattern of a flying to b , connecting through c , then we use a DataFrame filter on the the results for A=LAX and C=LGA . The results show some flights connecting through IAH for flights from LAX to LGA .</p>\n</div>"}]}},{"title":"Motif Search for connections between LAX and LGA","text":"// Motif query to search for the pattern of a flying to b , connecting through c \n// DataFrame filter on the the results for A=LAX and C=LGA .\n// results show some flights connecting through IAH for flights from LAX to LGA .\nz.show(graph.find(\"(a)-[ab]->(b); (b)-[bc]->(c)\").filter(\"a.id = 'LAX'\").filter(\"c.id = 'LGA'\").limit(4))","user":"anonymous","dateUpdated":"2019-03-12T21:45:21+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"a":"string","ab":"string","b":"string","bc":"string","c":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"a\tab\tb\tbc\tc\n[Los Angeles,USA,CA,LAX]\t[LAX_IAH_2018-01-01_UA_1125,2018-01-01,1,1,UA,LAX,IAH,8,817,0.0,1333,0.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[Houston,USA,TX,IAH]\t[IAH_LGA_2018-01-01_UA_1254,2018-01-01,1,1,UA,IAH,LGA,12,1230,0.0,1655,0.0,205.0,1416.0,IAH_LGA,0.0,0.0]\t[New York,USA,NY,LGA]\n[Los Angeles,USA,CA,LAX]\t[LAX_IAH_2018-01-01_UA_1125,2018-01-01,1,1,UA,LAX,IAH,8,817,0.0,1333,0.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[Houston,USA,TX,IAH]\t[IAH_LGA_2018-01-01_UA_1284,2018-01-01,1,1,UA,IAH,LGA,18,1805,52.0,2233,22.0,208.0,1416.0,IAH_LGA,1.0,1.0]\t[New York,USA,NY,LGA]\n[Los Angeles,USA,CA,LAX]\t[LAX_IAH_2018-01-01_UA_1125,2018-01-01,1,1,UA,LAX,IAH,8,817,0.0,1333,0.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[Houston,USA,TX,IAH]\t[IAH_LGA_2018-01-01_UA_1410,2018-01-01,1,1,UA,IAH,LGA,14,1441,8.0,1912,6.0,211.0,1416.0,IAH_LGA,0.0,1.0]\t[New York,USA,NY,LGA]\n[Los Angeles,USA,CA,LAX]\t[LAX_IAH_2018-01-01_UA_1125,2018-01-01,1,1,UA,LAX,IAH,8,817,0.0,1333,0.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[Houston,USA,TX,IAH]\t[IAH_LGA_2018-01-01_UA_1501,2018-01-01,1,1,UA,IAH,LGA,19,1900,0.0,2321,0.0,201.0,1416.0,IAH_LGA,0.0,1.0]\t[New York,USA,NY,LGA]\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1552425966468_-487021488","id":"20181101-172502_721117704","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12658","dateFinished":"2019-03-12T21:46:09+0000","dateStarted":"2019-03-12T21:45:22+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=470","http://7e407bf8b552:4040/jobs/job?id=471","http://7e407bf8b552:4040/jobs/job?id=472","http://7e407bf8b552:4040/jobs/job?id=473","http://7e407bf8b552:4040/jobs/job?id=474","http://7e407bf8b552:4040/jobs/job?id=475","http://7e407bf8b552:4040/jobs/job?id=476"],"interpreterSettingId":"spark"}}},{"title":"Breadth First Search for  Flights between LAX and LGA with 1 connection","text":"//Breadth First Search for Direcct Flights between LAX and LGA\n//Here we set the maxPathLength to 2\n//The results show connections through Houston IAH \nz.show(graph.bfs.fromExpr(\"id = 'LAX'\").toExpr(\"id = 'LGA'\").maxPathLength(2).run().limit(4))","user":"anonymous","dateUpdated":"2019-03-12T22:25:50+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"from":"string","e0":"string","v1":"string","e1":"string","to":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"from\te0\tv1\te1\tto\n[Los Angeles,USA,CA,LAX]\t[LAX_IAH_2018-01-01_UA_1125,2018-01-01,1,1,UA,LAX,IAH,8,817,0.0,1333,0.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[Houston,USA,TX,IAH]\t[IAH_LGA_2018-01-01_UA_1254,2018-01-01,1,1,UA,IAH,LGA,12,1230,0.0,1655,0.0,205.0,1416.0,IAH_LGA,0.0,0.0]\t[New York,USA,NY,LGA]\n[Los Angeles,USA,CA,LAX]\t[LAX_IAH_2018-01-01_UA_1125,2018-01-01,1,1,UA,LAX,IAH,8,817,0.0,1333,0.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[Houston,USA,TX,IAH]\t[IAH_LGA_2018-01-01_UA_1284,2018-01-01,1,1,UA,IAH,LGA,18,1805,52.0,2233,22.0,208.0,1416.0,IAH_LGA,1.0,0.0]\t[New York,USA,NY,LGA]\n[Los Angeles,USA,CA,LAX]\t[LAX_IAH_2018-01-01_UA_1125,2018-01-01,1,1,UA,LAX,IAH,8,817,0.0,1333,0.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[Houston,USA,TX,IAH]\t[IAH_LGA_2018-01-01_UA_1410,2018-01-01,1,1,UA,IAH,LGA,14,1441,8.0,1912,6.0,211.0,1416.0,IAH_LGA,0.0,0.0]\t[New York,USA,NY,LGA]\n[Los Angeles,USA,CA,LAX]\t[LAX_IAH_2018-01-01_UA_1125,2018-01-01,1,1,UA,LAX,IAH,8,817,0.0,1333,0.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[Houston,USA,TX,IAH]\t[IAH_LGA_2018-01-01_UA_1501,2018-01-01,1,1,UA,IAH,LGA,19,1900,0.0,2321,0.0,201.0,1416.0,IAH_LGA,0.0,0.0]\t[New York,USA,NY,LGA]\n"}]},"apps":[],"jobName":"paragraph_1552425966468_1393314322","id":"20181101-201632_255885482","dateCreated":"2019-03-12T21:26:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12659"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552429301133_578309649","id":"20190312-222141_484276640","dateCreated":"2019-03-12T22:21:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:26768","text":"%md\n### Shortest Path Graph Algorithm\nShortest paths computes the shortest paths from each vertex to the given sequence of landmark vertices, Here we search for the shortest path from each airport to LGA , the results show that there are no direct flights from LAX, SFO, SEA , and EWR to LGA (the distances greater than 1).","dateUpdated":"2019-03-12T22:22:19+0000","dateFinished":"2019-03-12T22:22:19+0000","dateStarted":"2019-03-12T22:22:19+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Shortest Path Graph Algorithm</h3>\n<p>Shortest paths computes the shortest paths from each vertex to the given sequence of landmark vertices, Here we search for the shortest path from each airport to LGA , the results show that there are no direct flights from LAX, SFO, SEA , and EWR to LGA (the distances greater than 1).</p>\n</div>"}]}},{"title":"Computes shortest paths  from each Airport to LGA ","text":"val results = graph.shortestPaths.landmarks(Seq(\"LGA\")).run()\nresults.select(\"id\", \"distances\").show()","user":"anonymous","dateUpdated":"2019-03-12T21:26:06+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"results: org.apache.spark.sql.DataFrame = [City: string, Country: string ... 3 more fields]\n+---+----------+\n| id| distances|\n+---+----------+\n|IAH|[LGA -> 1]|\n|CLT|[LGA -> 1]|\n|LAX|[LGA -> 2]|\n|DEN|[LGA -> 1]|\n|DFW|[LGA -> 1]|\n|SFO|[LGA -> 2]|\n|LGA|[LGA -> 0]|\n|ORD|[LGA -> 1]|\n|MIA|[LGA -> 1]|\n|SEA|[LGA -> 2]|\n|ATL|[LGA -> 1]|\n|BOS|[LGA -> 1]|\n|EWR|[LGA -> 2]|\n+---+----------+\n\n"}]},"apps":[],"jobName":"paragraph_1552425966468_-1535838601","id":"20181105-235210_203617664","dateCreated":"2019-03-12T21:26:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12660"},{"title":"BFS From LGA direct to SFO","text":"//Breadth First Search for Direcct Flights between LGA and SFO\n//Here we set the maxPathLength to 1 \n//The results show no direct flights \ngraph.bfs.fromExpr(\"id = 'LGA'\").toExpr(\"id = 'SFO'\").maxPathLength(1).run().show()","user":"anonymous","dateUpdated":"2019-03-12T22:27:23+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+-------+-----+---+\n|City|Country|State| id|\n+----+-------+-----+---+\n+----+-------+-----+---+\n\n"}]},"apps":[],"jobName":"paragraph_1552425966468_-122802654","id":"20181105-223922_1745279445","dateCreated":"2019-03-12T21:26:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12661"},{"title":"BFS From LGA  to SFO with 1 connection and carrier UA","text":"//Here we set the maxPathLength to 2. \n//The results show some flights connecting through IAH for flights from LAX to LGA \ngraph.bfs.fromExpr(\"id = 'LGA'\").toExpr(\"id = 'SFO'\").edgeFilter(\"carrier='UA'\").maxPathLength(2).run().show(5)","user":"anonymous","dateUpdated":"2019-03-12T22:25:05+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+--------------------+--------------------+--------------------+\n|                from|                  e0|                  v1|                  e1|                  to|\n+--------------------+--------------------+--------------------+--------------------+--------------------+\n|[New York, USA, N...|[LGA_IAH_2018-01-...|[Houston, USA, TX...|[IAH_SFO_2018-01-...|[San Francisco, U...|\n|[New York, USA, N...|[LGA_IAH_2018-01-...|[Houston, USA, TX...|[IAH_SFO_2018-01-...|[San Francisco, U...|\n|[New York, USA, N...|[LGA_IAH_2018-01-...|[Houston, USA, TX...|[IAH_SFO_2018-01-...|[San Francisco, U...|\n|[New York, USA, N...|[LGA_IAH_2018-01-...|[Houston, USA, TX...|[IAH_SFO_2018-01-...|[San Francisco, U...|\n|[New York, USA, N...|[LGA_IAH_2018-01-...|[Houston, USA, TX...|[IAH_SFO_2018-01-...|[San Francisco, U...|\n+--------------------+--------------------+--------------------+--------------------+--------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966469_1182724995","id":"20181105-225902_864789624","dateCreated":"2019-03-12T21:26:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12662"},{"title":"BFS direct SEA to LGA","text":"graph.bfs.fromExpr(\"id = 'SEA'\").toExpr(\"id = 'LGA'\").maxPathLength(1).run().show()","user":"anonymous","dateUpdated":"2019-03-12T21:26:06+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+-------+-----+---+\n|City|Country|State| id|\n+----+-------+-----+---+\n+----+-------+-----+---+\n\n"}]},"apps":[],"jobName":"paragraph_1552425966469_-463032528","id":"20181105-223952_1981908736","dateCreated":"2019-03-12T21:26:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12663"},{"title":"BFS SEA to LGA with one connection","text":"graph.bfs.fromExpr(\"id = 'SEA'\").toExpr(\"id = 'LGA'\").edgeFilter(\"carrier='UA'\").maxPathLength(2).run().show(5)\n","user":"anonymous","dateUpdated":"2019-03-12T21:45:48+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+--------------------+--------------------+--------------------+\n|                from|                  e0|                  v1|                  e1|                  to|\n+--------------------+--------------------+--------------------+--------------------+--------------------+\n|[Seattle, USA, WA...|[SEA_IAH_2018-01-...|[Houston, USA, TX...|[IAH_LGA_2018-01-...|[New York, USA, N...|\n|[Seattle, USA, WA...|[SEA_IAH_2018-01-...|[Houston, USA, TX...|[IAH_LGA_2018-01-...|[New York, USA, N...|\n|[Seattle, USA, WA...|[SEA_IAH_2018-01-...|[Houston, USA, TX...|[IAH_LGA_2018-01-...|[New York, USA, N...|\n|[Seattle, USA, WA...|[SEA_IAH_2018-01-...|[Houston, USA, TX...|[IAH_LGA_2018-01-...|[New York, USA, N...|\n|[Seattle, USA, WA...|[SEA_IAH_2018-01-...|[Houston, USA, TX...|[IAH_LGA_2018-01-...|[New York, USA, N...|\n+--------------------+--------------------+--------------------+--------------------+--------------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1552425966469_-877347274","id":"20181105-212420_1459254708","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12664","dateFinished":"2019-03-12T21:46:15+0000","dateStarted":"2019-03-12T21:45:48+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=477","http://7e407bf8b552:4040/jobs/job?id=478","http://7e407bf8b552:4040/jobs/job?id=479","http://7e407bf8b552:4040/jobs/job?id=480","http://7e407bf8b552:4040/jobs/job?id=481","http://7e407bf8b552:4040/jobs/job?id=482","http://7e407bf8b552:4040/jobs/job?id=483","http://7e407bf8b552:4040/jobs/job?id=484","http://7e407bf8b552:4040/jobs/job?id=485","http://7e407bf8b552:4040/jobs/job?id=486","http://7e407bf8b552:4040/jobs/job?id=487","http://7e407bf8b552:4040/jobs/job?id=488","http://7e407bf8b552:4040/jobs/job?id=489","http://7e407bf8b552:4040/jobs/job?id=490","http://7e407bf8b552:4040/jobs/job?id=491","http://7e407bf8b552:4040/jobs/job?id=492","http://7e407bf8b552:4040/jobs/job?id=493","http://7e407bf8b552:4040/jobs/job?id=494","http://7e407bf8b552:4040/jobs/job?id=495","http://7e407bf8b552:4040/jobs/job?id=496","http://7e407bf8b552:4040/jobs/job?id=497","http://7e407bf8b552:4040/jobs/job?id=498"],"interpreterSettingId":"spark"}}},{"title":"Motif search for flights Delays From LAX  through IAH to LGA on the same day ","text":"val paths = graph.find(\"(a)-[ab]->(b); (b)-[bc]->(c)\").filter(\"(a.id =='LAX') and (b.id =='IAH') and (c.id =='LGA') and (bc.arrdelay>40) and (ab.arrdelay>40)and(bc.crsdephour + bc.depdelay > ab.crsdephour + ab.arrdelay ) and (ab.fldate == bc.fldate)\").limit(20)\n\nz.show(paths.select($\"ab\", $\"bc\"))\n","user":"anonymous","dateUpdated":"2019-03-12T21:46:19+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"ab":"string","bc":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}},"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"ab":"string","bc":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"ab\tbc\n[LAX_IAH_2018-06-20_UA_1233,2018-06-20,6,3,UA,LAX,IAH,12,1245,19.0,1807,56.0,202.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-06-20_UA_1284,2018-06-20,6,3,UA,IAH,LGA,18,1814,95.0,2243,96.0,209.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-06-20_UA_1233,2018-06-20,6,3,UA,LAX,IAH,12,1245,19.0,1807,56.0,202.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-06-20_UA_2094,2018-06-20,6,3,UA,IAH,LGA,16,1627,124.0,2059,121.0,212.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-06-20_UA_1241,2018-06-20,6,3,UA,LAX,IAH,13,1324,0.0,1840,58.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-06-20_UA_1284,2018-06-20,6,3,UA,IAH,LGA,18,1814,95.0,2243,96.0,209.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-06-20_UA_1241,2018-06-20,6,3,UA,LAX,IAH,13,1324,0.0,1840,58.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-06-20_UA_2094,2018-06-20,6,3,UA,IAH,LGA,16,1627,124.0,2059,121.0,212.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-06-19_UA_1984,2018-06-19,6,2,UA,LAX,IAH,17,1738,209.0,2257,202.0,199.0,1379.0,LAX_IAH,1.0,0.0]\t[IAH_LGA_2018-06-19_UA_1254,2018-06-19,6,2,UA,IAH,LGA,12,1220,239.0,1655,219.0,215.0,1416.0,IAH_LGA,1.0,0.0]\n[LAX_IAH_2018-06-19_UA_717,2018-06-19,6,2,UA,LAX,IAH,24,2359,68.0,518,72.0,199.0,1379.0,LAX_IAH,1.0,0.0]\t[IAH_LGA_2018-06-19_UA_1254,2018-06-19,6,2,UA,IAH,LGA,12,1220,239.0,1655,219.0,215.0,1416.0,IAH_LGA,1.0,0.0]\n[LAX_IAH_2018-06-19_UA_717,2018-06-19,6,2,UA,LAX,IAH,24,2359,68.0,518,72.0,199.0,1379.0,LAX_IAH,1.0,0.0]\t[IAH_LGA_2018-06-19_UA_488,2018-06-19,6,2,UA,IAH,LGA,14,1445,89.0,1923,64.0,218.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-01-11_UA_1148,2018-01-11,1,4,UA,LAX,IAH,15,1529,26.0,2045,59.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-01-11_UA_1410,2018-01-11,1,4,UA,IAH,LGA,14,1435,317.0,1905,296.0,210.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-01-11_UA_1148,2018-01-11,1,4,UA,LAX,IAH,15,1529,26.0,2045,59.0,196.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-01-11_UA_2094,2018-01-11,1,4,UA,IAH,LGA,16,1628,233.0,2059,204.0,211.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-05-15_UA_1614,2018-05-15,5,2,UA,LAX,IAH,1,115,63.0,625,51.0,190.0,1379.0,LAX_IAH,1.0,0.0]\t[IAH_LGA_2018-05-15_UA_1284,2018-05-15,5,2,UA,IAH,LGA,18,1830,86.0,2259,88.0,209.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-05-15_UA_1614,2018-05-15,5,2,UA,LAX,IAH,1,115,63.0,625,51.0,190.0,1379.0,LAX_IAH,1.0,0.0]\t[IAH_LGA_2018-05-15_UA_1501,2018-05-15,5,2,UA,IAH,LGA,17,1730,96.0,2158,111.0,208.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-05-15_UA_1614,2018-05-15,5,2,UA,LAX,IAH,1,115,63.0,625,51.0,190.0,1379.0,LAX_IAH,1.0,0.0]\t[IAH_LGA_2018-05-15_UA_488,2018-05-15,5,2,UA,IAH,LGA,14,1429,76.0,1900,93.0,211.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-03-22_UA_1578,2018-03-22,3,4,UA,LAX,IAH,10,1000,75.0,1523,66.0,203.0,1379.0,LAX_IAH,1.0,0.0]\t[IAH_LGA_2018-03-22_UA_1501,2018-03-22,3,4,UA,IAH,LGA,17,1728,60.0,2159,52.0,211.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-06-16_UA_1148,2018-06-16,6,6,UA,LAX,IAH,15,1455,53.0,2011,53.0,196.0,1379.0,LAX_IAH,1.0,0.0]\t[IAH_LGA_2018-06-16_UA_2094,2018-06-16,6,6,UA,IAH,LGA,16,1627,66.0,2059,57.0,212.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-01-17_UA_1815,2018-01-17,1,3,UA,LAX,IAH,6,600,0.0,1113,63.0,193.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-01-17_UA_1284,2018-01-17,1,3,UA,IAH,LGA,18,1840,177.0,2311,149.0,211.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-01-17_UA_1815,2018-01-17,1,3,UA,LAX,IAH,6,600,0.0,1113,63.0,193.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-01-17_UA_1410,2018-01-17,1,3,UA,IAH,LGA,14,1435,101.0,1905,81.0,210.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-01-17_UA_1815,2018-01-17,1,3,UA,LAX,IAH,6,600,0.0,1113,63.0,193.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-01-17_UA_1501,2018-01-17,1,3,UA,IAH,LGA,17,1728,77.0,2159,60.0,211.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-01-17_UA_1815,2018-01-17,1,3,UA,LAX,IAH,6,600,0.0,1113,63.0,193.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-01-17_UA_1920,2018-01-17,1,3,UA,IAH,LGA,10,1005,98.0,1432,95.0,207.0,1416.0,IAH_LGA,1.0,0.0]\n[LAX_IAH_2018-01-17_UA_1815,2018-01-17,1,3,UA,LAX,IAH,6,600,0.0,1113,63.0,193.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-01-17_UA_2094,2018-01-17,1,3,UA,IAH,LGA,16,1628,81.0,2059,78.0,211.0,1416.0,IAH_LGA,1.0,1.0]\n[LAX_IAH_2018-07-20_UA_1981,2018-07-20,7,5,UA,LAX,IAH,11,1115,0.0,1628,46.0,193.0,1379.0,LAX_IAH,0.0,0.0]\t[IAH_LGA_2018-07-20_UA_1254,2018-07-20,7,5,UA,IAH,LGA,12,1220,76.0,1655,64.0,215.0,1416.0,IAH_LGA,1.0,0.0]\n"},{"type":"TEXT","data":"paths: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [a: struct<City: string, Country: string ... 2 more fields>, ab: struct<id: string, fldate: string ... 15 more fields> ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1552425966469_-1994405138","id":"20181105-212701_1461921300","dateCreated":"2019-03-12T21:26:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12665","dateFinished":"2019-03-12T21:46:17+0000","dateStarted":"2019-03-12T21:46:10+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://7e407bf8b552:4040/jobs/job?id=499","http://7e407bf8b552:4040/jobs/job?id=500","http://7e407bf8b552:4040/jobs/job?id=501","http://7e407bf8b552:4040/jobs/job?id=502","http://7e407bf8b552:4040/jobs/job?id=503","http://7e407bf8b552:4040/jobs/job?id=504","http://7e407bf8b552:4040/jobs/job?id=505"],"interpreterSettingId":"spark"}}},{"user":"anonymous","dateUpdated":"2019-03-12T21:26:06+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1552425966470_631190100","id":"20181101-173104_147893790","dateCreated":"2019-03-12T21:26:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12666","text":"df.unpersist"}],"name":"FlightDelay5GraphFrames","id":"2E6HFAC4V","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}