{"paragraphs":[{"text":"%md \n## Streaming Data\nMapR Event Store is a distributed publish-subscribe event streaming system that enables producers and consumers to exchange events in real time in a parallel and fault-tolerant manner via the Apache Kafka API.\nA stream represents a continuous sequence of events that goes from producers to consumers, where an event is defined as a key-value pair.\n<img src=\"https://mapr.com/blog/real-time-analysis-popular-uber-locations-spark-structured-streaming-machine-learning-kafka-and-mapr-db/assets/image29.png\">\nThe Streaming event values have the following format:\n\n{\"id\":\"ATL_BOS_2018-01-01_DL_104\",\"fldate\":\"2018-01-01\",\"month\":1,\"dofW\":1,\n\"carrier\":\"DL\",\"src\":\"ATL\",\"dst\":\"BOS\",\"crsdephour\":9,\"crsdeptime\":850,\"depdelay\":0.0,\n\"crsarrtime\":1116,\"arrdelay\":0.0,\"crselapsedtime\":146.0,\"dist\":946.0}\n\nWe will use the machine learning model to enrich the events with the flight delay label and predictions and we will store the results in MapR Database. \n\n<img src=\"https://mapr.com/blog/real-time-analysis-popular-uber-locations-spark-structured-streaming-machine-learning-kafka-and-mapr-db/assets/image46.png\">","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Streaming Data</h2>\n<p>MapR Event Store is a distributed publish-subscribe event streaming system that enables producers and consumers to exchange events in real time in a parallel and fault-tolerant manner via the Apache Kafka API.<br/>A stream represents a continuous sequence of events that goes from producers to consumers, where an event is defined as a key-value pair.<br/><img src=\"https://mapr.com/blog/real-time-analysis-popular-uber-locations-spark-structured-streaming-machine-learning-kafka-and-mapr-db/assets/image29.png\"><br/>The Streaming event values have the following format:</p>\n<p>{&ldquo;id&rdquo;:&ldquo;ATL_BOS_2018-01-01_DL_104&rdquo;,&ldquo;fldate&rdquo;:&ldquo;2018-01-01&rdquo;,&ldquo;month&rdquo;:1,&ldquo;dofW&rdquo;:1,<br/>&ldquo;carrier&rdquo;:&ldquo;DL&rdquo;,&ldquo;src&rdquo;:&ldquo;ATL&rdquo;,&ldquo;dst&rdquo;:&ldquo;BOS&rdquo;,&ldquo;crsdephour&rdquo;:9,&ldquo;crsdeptime&rdquo;:850,&ldquo;depdelay&rdquo;:0.0,<br/>&ldquo;crsarrtime&rdquo;:1116,&ldquo;arrdelay&rdquo;:0.0,&ldquo;crselapsedtime&rdquo;:146.0,&ldquo;dist&rdquo;:946.0}</p>\n<p>We will use the machine learning model to enrich the events with the flight delay label and predictions and we will store the results in MapR Database. </p>\n<img src=\"https://mapr.com/blog/real-time-analysis-popular-uber-locations-spark-structured-streaming-machine-learning-kafka-and-mapr-db/assets/image46.png\">\n</div>"}]},"apps":[],"jobName":"paragraph_1551901607382_-1007929839","id":"20170530-122945_1594214131","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6504"},{"text":"%md\n## Spark Structured Streaming\n\nStructured Streaming is a scalable and fault-tolerant stream processing engine built on the Spark SQL engine. Structured Streaming enables you to view data published to Kafka as an unbounded DataFrame and process this data with the same DataFrame, Dataset, and SQL APIs used for batch processing.\n<img src=\"https://mapr.com/blog/real-time-analysis-popular-uber-locations-spark-structured-streaming-machine-learning-kafka-and-mapr-db/assets/image25.png\">","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Spark Structured Streaming</h2>\n<p>Structured Streaming is a scalable and fault-tolerant stream processing engine built on the Spark SQL engine. Structured Streaming enables you to view data published to Kafka as an unbounded DataFrame and process this data with the same DataFrame, Dataset, and SQL APIs used for batch processing.<br/><img src=\"https://mapr.com/blog/real-time-analysis-popular-uber-locations-spark-structured-streaming-machine-learning-kafka-and-mapr-db/assets/image25.png\"></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1551901607385_694091034","id":"20190220-173254_1728425170","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6505"},{"title":"Import needed packages","text":"%spark\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql._\nimport org.apache.spark.streaming._\n\nimport org.apache.spark.ml._\nimport org.apache.spark.ml.feature._\nimport org.apache.spark.ml.classification._\nimport org.apache.spark.ml.evaluation._\nimport org.apache.spark.ml.tuning._\n","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql._\nimport org.apache.spark.streaming._\nimport org.apache.spark.ml._\nimport org.apache.spark.ml.feature._\nimport org.apache.spark.ml.classification._\nimport org.apache.spark.ml.evaluation._\nimport org.apache.spark.ml.tuning._\n"}]},"apps":[],"jobName":"paragraph_1551901607386_-2124524617","id":"20170508-144514_403247535","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6506"},{"title":"Define Schema for JSON streaming data","text":"\nimport org.apache.spark.sql.types._\n\n// {“id”:“ATL_BOS_2018-01-01_DL_104”,“fldate”:“2018-01-01”,“month”:1,“dofW”:1,\n//“carrier”:“DL”,“src”:“ATL”,“dst”:“BOS”,“crsdephour”:9,“crsdeptime”:850,“depdelay”:0.0,\n//“crsarrtime”:1116,“arrdelay”:0.0,“crselapsedtime”:146.0,“dist”:946.0}\n\n  val schema = StructType(Array(\n    StructField(\"id\", StringType, true),\n    StructField(\"fldate\", StringType, true),\n    StructField(\"month\", IntegerType, true),\n    StructField(\"dofW\", IntegerType, true),\n    StructField(\"carrier\", StringType, true),\n    StructField(\"src\", StringType, true),\n    StructField(\"dst\", StringType, true),\n    StructField(\"crsdephour\", IntegerType, true),\n    StructField(\"crsdeptime\", IntegerType, true),\n    StructField(\"depdelay\", DoubleType, true),\n    StructField(\"crsarrtime\", IntegerType, true),\n    StructField(\"arrdelay\", DoubleType, true),\n    StructField(\"crselapsedtime\", DoubleType, true),\n    StructField(\"dist\", DoubleType, true)\n  ))\n   ","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.types._\nschema: org.apache.spark.sql.types.StructType = StructType(StructField(id,StringType,true), StructField(fldate,StringType,true), StructField(month,IntegerType,true), StructField(dofW,IntegerType,true), StructField(carrier,StringType,true), StructField(src,StringType,true), StructField(dst,StringType,true), StructField(crsdephour,IntegerType,true), StructField(crsdeptime,IntegerType,true), StructField(depdelay,DoubleType,true), StructField(crsarrtime,IntegerType,true), StructField(arrdelay,DoubleType,true), StructField(crselapsedtime,DoubleType,true), StructField(dist,DoubleType,true))\n"}]},"apps":[],"jobName":"paragraph_1551901607386_-1359579262","id":"20170508-150032_326029627","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6507"},{"title":"Define Topic , Table , and Model Directory","text":"// MapR Event Store for Kafka Topic to read from \nvar topic: String = \"/user/mapr/stream:flights\"\n// MapR Database table to write to \nvar tableName: String = \"/user/mapr/flighttable\"\n// Directory to read the saved ML model from \nvar modeldirectory: String  =\"maprfs:///user/mapr/model/\"\n","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"topic: String = /user/mapr/stream:flights\ntableName: String = /user/mapr/flighttable\nmodeldirectory: String = maprfs:///user/mapr/model/\n"}]},"apps":[],"jobName":"paragraph_1551901607386_609114353","id":"20170508-150131_378637203","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6508"},{"title":"Read the saved Machine Learning Model","text":"import spark.implicits._\nval model = org.apache.spark.ml.PipelineModel.load(modeldirectory)","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import spark.implicits._\nmodel: org.apache.spark.ml.PipelineModel = pipeline_adde7398f0ae\n"}]},"apps":[],"jobName":"paragraph_1551901607387_-976601722","id":"20171129-221736_959969733","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6509"},{"text":"%md\n## Reading Data from Kafka Topics\nIn order to read from Kafka, we must first specify the stream format, topic, and offset options.For more information on the configuration parameters","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Reading Data from Kafka Topics</h2>\n<p>In order to read from Kafka, we must first specify the stream format, topic, and offset options.For more information on the configuration parameters</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1551901607387_-2022432146","id":"20190306-165333_491584061","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6510"},{"title":"Read Stream from Kafka topic ","text":"val df1 = spark.readStream.format(\"kafka\")\n      .option(\"kafka.bootstrap.servers\", \"maprdemo:9092\")\n      .option(\"subscribe\", topic)\n      .option(\"group.id\", \"testgroup\")\n      .option(\"startingOffsets\", \"earliest\")\n      .option(\"failOnDataLoss\", false)\n      .option(\"maxOffsetsPerTrigger\", 1000)\n      .load()","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df1: org.apache.spark.sql.DataFrame = [key: binary, value: binary ... 5 more fields]\n"}]},"apps":[],"jobName":"paragraph_1551901607388_837407408","id":"20190306-002931_1225657206","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6511"},{"title":"Print DataFrame Schema","text":"// readStream.format \"kafka\" returns a DataFrame with the following schema:\ndf1.printSchema","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- key: binary (nullable = true)\n |-- value: binary (nullable = true)\n |-- topic: string (nullable = true)\n |-- partition: integer (nullable = true)\n |-- offset: long (nullable = true)\n |-- timestamp: timestamp (nullable = true)\n |-- timestampType: integer (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1551901607388_861155806","id":"20171129-223643_463511351","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6512"},{"text":"%md\nThe next step is to parse and transform the binary values column into a Dataset of Flight schema.\nIn the code below: \n* first we use a select expression with a String Cast of the df1 column value to convert the value from binary to string\n* then we use the from_json Spark SQL function in a select expression to retrieve the JSON string as the specified schema StructTyp\n","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The next step is to parse and transform the binary values column into a Dataset of Flight schema.<br/>In the code below:<br/>* first we use a select expression with a String Cast of the df1 column value to convert the value from binary to string<br/>* then we use the from_json Spark SQL function in a select expression to retrieve the JSON string as the specified schema StructTyp</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1551901607388_-1069114375","id":"20190306-165945_2131987408","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6513"},{"title":"Parse the Message Values into a Dataframe of Flight Schema","text":"// cast the df1 column value to string\n// use the from_json function to convert value JSON string to flight schema\nval df2 = df1.select($\"value\" cast \"string\" as \"json\").select(from_json($\"json\", schema) as \"data\").select(\"data.*\")","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df2: org.apache.spark.sql.DataFrame = [id: string, fldate: string ... 12 more fields]\n"}]},"apps":[],"jobName":"paragraph_1551901607389_-1343932000","id":"20190306-003118_1790885997","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6514"},{"text":" // add column orig_dest, needed feature for ML model\n val df3 = df2.withColumn(\"orig_dest\", concat($\"src\", lit(\"_\"), $\"dst\"))","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df3: org.apache.spark.sql.DataFrame = [id: string, fldate: string ... 13 more fields]\n"}]},"apps":[],"jobName":"paragraph_1551901607389_-1829787649","id":"20190306-010238_1100520892","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6515"},{"text":"%md\n## Enriching the flight Dataframe with label and predictions\nWe transform the DataFrame with the model pipeline, which will tranform the features according to the pipeline, estimate and then return the predictions in a column of a new DateFrame.","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Enriching the flight Dataframe with label and predictions</h2>\n<p>We transform the DataFrame with the model pipeline, which will tranform the features according to the pipeline, estimate and then return the predictions in a column of a new DateFrame.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1551901607389_-1260478211","id":"20190306-171339_1154203095","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6516"},{"text":"// transform the DataFrame with the model pipeline, which will tranform the features according to the pipeline, \n// estimate and then return the predictions in a column of a new DateFrame\nval predictions = model.transform(df3)","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"predictions: org.apache.spark.sql.DataFrame = [id: string, fldate: string ... 23 more fields]\n"}]},"apps":[],"jobName":"paragraph_1551901607390_-1068452085","id":"20190306-010315_921932660","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6517"},{"text":"// select the columns that we want to store\nval lp = predictions.select($\"id\",$\"fldate\", $\"month\", $\"dofW\", $\"carrier\", $\"src\", $\"dst\", $\"orig_dest\",\n      $\"crsdephour\", $\"crsdeptime\", $\"crsarrtime\", $\"crselapsedtime\", $\"depdelay\",$\"arrdelay\",$\"dist\",\n      $\"label\", $\"prediction\")","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"lp: org.apache.spark.sql.DataFrame = [id: string, fldate: string ... 15 more fields]\n"}]},"apps":[],"jobName":"paragraph_1551901607390_979602718","id":"20190306-010344_1169277532","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6518"},{"text":"// write stream to memory just to show a little output, not for long or will run out of memory\nval streamingquery = lp.writeStream.queryName(\"flight\").format(\"memory\").outputMode(\"append\").start","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"java.lang.IllegalArgumentException: Cannot start query with name flight as a query with that name is already active\n  at org.apache.spark.sql.streaming.StreamingQueryManager$$anonfun$startQuery$1.apply(StreamingQueryManager.scala:315)\n  at org.apache.spark.sql.streaming.StreamingQueryManager$$anonfun$startQuery$1.apply(StreamingQueryManager.scala:313)\n  at scala.Option.foreach(Option.scala:257)\n  at org.apache.spark.sql.streaming.StreamingQueryManager.startQuery(StreamingQueryManager.scala:313)\n  at org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:258)\n  ... 91 elided\n"}]},"apps":[],"jobName":"paragraph_1551901607391_1724200909","id":"20190306-010555_971185250","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6519"},{"text":"%sql  \nselect * from flight limit 10","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","fldate":"string","month":"string","dofW":"string","carrier":"string","src":"string","dst":"string","orig_dest":"string","crsdephour":"string","crsdeptime":"string","crsarrtime":"string","crselapsedtime":"string","depdelay":"string","arrdelay":"string","dist":"string","label":"string","prediction":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"id\tfldate\tmonth\tdofW\tcarrier\tsrc\tdst\torig_dest\tcrsdephour\tcrsdeptime\tcrsarrtime\tcrselapsedtime\tdepdelay\tarrdelay\tdist\tlabel\tprediction\nATL_BOS_2018-01-01_DL_104\t2018-01-01\t1\t1\tDL\tATL\tBOS\tATL_BOS\t9\t850\t1116\t146.0\t0.0\t0.0\t946.0\t0.0\t0.0\nATL_BOS_2018-01-01_DL_2100\t2018-01-01\t1\t1\tDL\tATL\tBOS\tATL_BOS\t19\t1940\t2210\t150.0\t6.0\t0.0\t946.0\t0.0\t1.0\nATL_BOS_2018-01-01_DL_1200\t2018-01-01\t1\t1\tDL\tATL\tBOS\tATL_BOS\t11\t1122\t1349\t147.0\t8.0\t0.0\t946.0\t0.0\t0.0\nATL_BOS_2018-01-01_DL_2792\t2018-01-01\t1\t1\tDL\tATL\tBOS\tATL_BOS\t12\t1248\t1513\t145.0\t0.0\t0.0\t946.0\t0.0\t0.0\nATL_BOS_2018-01-01_WN_170\t2018-01-01\t1\t1\tWN\tATL\tBOS\tATL_BOS\t21\t2055\t2330\t155.0\t14.0\t0.0\t946.0\t0.0\t1.0\nATL_BOS_2018-01-01_DL_1500\t2018-01-01\t1\t1\tDL\tATL\tBOS\tATL_BOS\t14\t1356\t1623\t147.0\t9.0\t0.0\t946.0\t0.0\t0.0\nATL_BOS_2018-01-01_DL_903\t2018-01-01\t1\t1\tDL\tATL\tBOS\tATL_BOS\t22\t2215\t39\t144.0\t0.0\t0.0\t946.0\t0.0\t1.0\nATL_BOS_2018-01-01_WN_1726\t2018-01-01\t1\t1\tWN\tATL\tBOS\tATL_BOS\t10\t1015\t1250\t155.0\t215.0\t191.0\t946.0\t1.0\t0.0\nATL_CLT_2018-01-01_AA_2095\t2018-01-01\t1\t1\tAA\tATL\tCLT\tATL_CLT\t7\t705\t821\t76.0\t0.0\t0.0\t226.0\t0.0\t0.0\nATL_BOS_2018-01-01_DL_1800\t2018-01-01\t1\t1\tDL\tATL\tBOS\tATL_BOS\t16\t1620\t1851\t151.0\t0.0\t3.0\t946.0\t0.0\t1.0\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607391_293436243","id":"20190306-010640_1357905563","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6521"},{"text":"streamingquery.stop()","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:110: error: value stop is not a member of org.apache.spark.sql.streaming.DataStreamWriter[org.apache.spark.sql.Row]\n       streamingquery.stop()\n                      ^\n"}]},"apps":[],"jobName":"paragraph_1551901607392_-863647242","id":"20190306-010617_1247563360","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6522"},{"text":"import com.mapr.db.spark.impl._\nimport com.mapr.db.spark.streaming._\nimport com.mapr.db.spark.sql._\nimport com.mapr.db.spark.streaming.MapRDBSourceConfig\nval writedb = df2.writeStream\n      .format(MapRDBSourceConfig.Format)\n      .option(MapRDBSourceConfig.TablePathOption, tableName)\n      .option(MapRDBSourceConfig.IdFieldPathOption, \"id\")\n      .option(MapRDBSourceConfig.CreateTableOption, false)\n      .option(\"checkpointLocation\", \"/tmp/flight\")\n      .option(MapRDBSourceConfig.BulkModeOption, true)\n      .option(MapRDBSourceConfig.SampleSizeOption, 1000)\n      .start()\n\n","user":"anonymous","dateUpdated":"2019-03-06T20:22:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.mapr.db.spark.impl._\nimport com.mapr.db.spark.streaming._\nimport com.mapr.db.spark.sql._\nimport com.mapr.db.spark.streaming.MapRDBSourceConfig\nwritedb: org.apache.spark.sql.streaming.DataStreamWriter[org.apache.spark.sql.Row] = org.apache.spark.sql.streaming.DataStreamWriter@78940790\n"}]},"apps":[],"jobName":"paragraph_1551901607392_1314255356","id":"20190306-003127_1670791655","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6523"},{"text":"import org.apache.spark._\n\nimport com.mapr.db._\nimport com.mapr.db.spark._\nimport com.mapr.db.spark.impl._\nimport com.mapr.db.spark.sql._\n\nval spark = org.apache.spark.sql.SparkSession.builder().appName(\"flightread\").getOrCreate()\n \n // load payment dataset from MapR-DB \nval df = spark.sparkSession.loadFromMapRDB[Flight](tableName, schema)\n//val df = sparkSession.loadFromMapRDB[Flight](tableName, schema)\n df.take(1)","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark._\nimport com.mapr.db._\nimport com.mapr.db.spark._\nimport com.mapr.db.spark.impl._\nimport com.mapr.db.spark.sql._\nspark: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@3a5696ba\ndf: org.apache.spark.sql.DataFrame = [id: string, fldate: string ... 12 more fields]\nres23: Array[org.apache.spark.sql.Row] = Array([ATL_BOS_2018-01-01_DL_104,2018-01-01,1,1,DL,ATL,BOS,9,850,0.0,1116,0.0,146.0,946.0])\n"}]},"apps":[],"jobName":"paragraph_1551901607393_1473289817","id":"20190306-011141_1523714467","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6525"},{"text":"df.show\n\ndf.createOrReplaceTempView(\"flights\")","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+-----+\n|                  id|    fldate|month|dofW|carrier|src|dst|crsdephour|crsdeptime|depdelay|crsarrtime|arrdelay|crselapsedtime| dist|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+-----+\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|         9|       850|     0.0|      1116|     0.0|         146.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        11|      1122|     8.0|      1349|     0.0|         147.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        14|      1356|     9.0|      1623|     0.0|         147.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        16|      1620|     0.0|      1851|     3.0|         151.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        19|      1940|     6.0|      2210|     0.0|         150.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        12|      1248|     0.0|      1513|     0.0|         145.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        22|      2215|     0.0|        39|     0.0|         144.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     DL|ATL|BOS|        15|      1500|    21.0|      1734|    33.0|         154.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     WN|ATL|BOS|        15|      1500|   198.0|      1725|   208.0|         145.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     WN|ATL|BOS|        21|      2055|    14.0|      2330|     0.0|         155.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-01|    1|   1|     WN|ATL|BOS|        10|      1015|   215.0|      1250|   191.0|         155.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|         9|       850|     9.0|      1116|     0.0|         146.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        11|      1123|     0.0|      1350|     0.0|         147.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        10|      1000|    22.0|      1232|    10.0|         152.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        14|      1356|     6.0|      1623|    21.0|         147.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        22|      2227|     8.0|        51|     0.0|         144.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        16|      1620|     0.0|      1851|     0.0|         151.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        19|      1940|    62.0|      2210|    50.0|         150.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        12|      1248|    15.0|      1513|     7.0|         145.0|946.0|\n|ATL_BOS_2018-01-0...|2018-01-02|    1|   2|     DL|ATL|BOS|        21|      2107|    12.0|      2335|    29.0|         148.0|946.0|\n+--------------------+----------+-----+----+-------+---+---+----------+----------+--------+----------+--------+--------------+-----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1551901607393_452857344","id":"20190306-011320_1619042382","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6526"},{"text":"%md \n# Use Spark SQL to explore the dataset","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Use Spark SQL to explore the dataset</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1551901607393_1512860527","id":"20170603-182655_1680505289","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6528"},{"text":"writedb.stop()","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1551901607393_-1732261911","id":"20190306-003457_1891238408","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6527","focus":true},{"title":"Top 5 Longest departure delays","text":"%sql \nselect carrier,src, dst, depdelay,crsdephour, dist, dofW\nfrom flights \norder by depdelay desc limit 5 \n","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"carrier":"string","src":"string","dst":"string","depdelay":"string","crsdephour":"string","dist":"string","dofW":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"carrier\tsrc\tdst\tdepdelay\tcrsdephour\tdist\tdofW\nAA\tIAH\tMIA\t1559.0\t11\t964.0\t5\nAA\tIAH\tDFW\t1445.0\t18\t224.0\t3\nAA\tBOS\tDFW\t1345.0\t10\t1562.0\t4\nUA\tBOS\tORD\t1334.0\t9\t867.0\t4\nAA\tLAX\tMIA\t1283.0\t9\t2342.0\t1\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607394_1738611700","id":"20171110-195321_1924356975","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6529"},{"title":"Average Departure Delay by Carrier","text":"%sql select carrier, avg(depdelay)\nfrom flights\ngroup by carrier","user":"anonymous","dateUpdated":"2019-03-06T20:13:32+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"carrier","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"avg(depdelay)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"carrier\tavg(depdelay)\nUA\t14.442583200307139\nAA\t14.129090626627798\nDL\t14.26168914855228\nWN\t17.70183428999251\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607394_1064223159","id":"20171110-195759_439800395","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6530"},{"title":"Average Departure Delay by Destination Airport","text":"%sql\nSELECT dst, avg(depdelay) as avgdelay\nFROM flights \nGROUP BY dst\nORDER BY avgdelay desc","user":"anonymous","dateUpdated":"2019-03-06T20:13:32+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"dst":"string","avgdelay":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{},"keys":[{"name":"dst","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"avgdelay","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"dst\tavgdelay\nEWR\t20.729607250755286\nSFO\t17.047248322147652\nLGA\t15.613878829401978\nBOS\t15.00700909577314\nORD\t14.846011016896702\nMIA\t14.371604732544576\nDFW\t13.946526636469315\nATL\t13.797100969652844\nLAX\t13.445941419479698\nSEA\t13.097595473833097\nDEN\t12.767347642444618\nIAH\t11.743971267316573\nCLT\t11.370676826001548\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607395_-1077524535","id":"20171122-204956_303346727","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6531"},{"title":"Average Departure Delay by Originating Airport","text":"%sql\nSELECT src, avg(depdelay) as avgdelay\nFROM flights \nGROUP BY src\nORDER BY avgdelay desc","user":"anonymous","dateUpdated":"2019-03-06T20:13:32+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"src","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"avgdelay","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"src\tavgdelay\nEWR\t17.818079459546404\nMIA\t17.768691978431264\nORD\t16.5199551010227\nATL\t15.330084535057185\nDFW\t15.061909338459074\nDEN\t14.192011960700555\nCLT\t14.081517835767297\nIAH\t13.804911168948738\nSFO\t13.792674746209919\nLGA\t13.586563812127721\nBOS\t12.940644675240812\nLAX\t11.223347230494342\nSEA\t10.140899425061038\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607395_584983745","id":"20171122-204822_1853914961","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6532"},{"title":"Count of Departure Delays by Day of the Week (1=Monday, 7=Sunday)","text":"%sql\nselect dofW, count(depdelay)\nfrom flights where depdelay > 40\ngroup by dofW\n","user":"anonymous","dateUpdated":"2019-03-06T20:13:32+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"dofW","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count(depdelay)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"dofW\tcount(depdelay)\n1\t4680\n6\t2598\n3\t3986\n5\t4677\n4\t4809\n7\t4163\n2\t4406\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607395_-1150660646","id":"20171123-101016_2040441762","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6533"},{"title":"Count of Departure Delays by Carrier (where delay=40 minutes)","text":"%sql\nselect carrier, count(delayed)\nfrom flights where delayed = 1\ngroup by carrier\norder by carrier","user":"anonymous","dateUpdated":"2019-03-06T20:13:32+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"carrier","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count(delayed)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"carrier\tcount(delayed)\nAA\t11570\nDL\t5354\nUA\t10297\nWN\t2098\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607396_-1402409346","id":"20171123-042011_1532799341","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6534"},{"title":"Count of Delayed Not Delayed  by Carrier","text":"%sql\nSELECT delayed, count(delayed),carrier\nFROM flights\nGROUP BY carrier, delayed\norder by carrier\n","user":"anonymous","dateUpdated":"2019-03-06T20:13:32+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false,"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"carrier","index":2,"aggr":"sum"}],"groups":[{"name":"delayed","index":0,"aggr":"sum"}],"values":[{"name":"count(delayed)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"delayed\tcount(delayed)\tcarrier\n1.0\t11570\tAA\n0.0\t97857\tAA\n0.0\t52841\tDL\n1.0\t5354\tDL\n0.0\t88681\tUA\n1.0\t10297\tUA\n1.0\t2098\tWN\n0.0\t13930\tWN\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607396_-1383937655","id":"20170524-144751_554129160","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6535"},{"title":"Count of Departure Delays by Hour of Day","text":"%sql\nselect crsdephour, count(depdelay)\nfrom flights where depdelay > 40\ngroup by crsdephour\n","user":"anonymous","dateUpdated":"2019-03-06T20:13:32+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"crsdephour","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count(depdelay)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"crsdephour\tcount(depdelay)\n12\t1893\n22\t1066\n1\t51\n13\t1728\n6\t518\n16\t2309\n20\t2260\n5\t175\n19\t2198\n15\t1969\n17\t2434\n9\t1112\n8\t1067\n23\t364\n7\t1068\n10\t1472\n24\t58\n21\t1180\n11\t1321\n14\t2041\n0\t106\n18\t2929\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607396_-622122841","id":"20171129-200107_756396508","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6536"},{"title":"Count of Delayed , Not Delayed by Hour","text":"%sql\nSELECT delayed, count(delayed),crsdephour\nFROM flights\nGROUP BY crsdephour, delayed\norder by delayed","user":"anonymous","dateUpdated":"2019-03-06T20:13:33+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false,"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"crsdephour","index":2,"aggr":"sum"}],"groups":[{"name":"delayed","index":0,"aggr":"sum"}],"values":[{"name":"count(delayed)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"delayed\tcount(delayed)\tcrsdephour\n0.0\t22365\t7\n0.0\t1499\t0\n0.0\t7242\t22\n0.0\t10675\t20\n0.0\t1217\t1\n0.0\t14966\t18\n0.0\t17327\t10\n0.0\t6511\t21\n0.0\t16790\t12\n0.0\t17001\t8\n0.0\t1017\t24\n0.0\t16660\t6\n0.0\t14946\t9\n0.0\t18\t2\n0.0\t14940\t11\n0.0\t2705\t23\n0.0\t13895\t13\n0.0\t15123\t14\n0.0\t14661\t16\n0.0\t13302\t15\n0.0\t10871\t19\n0.0\t13488\t17\n0.0\t6090\t5\n1.0\t1893\t12\n1.0\t364\t23\n1.0\t1321\t11\n1.0\t2260\t20\n1.0\t2434\t17\n1.0\t1112\t9\n1.0\t2198\t19\n1.0\t2041\t14\n1.0\t1728\t13\n1.0\t175\t5\n1.0\t58\t24\n1.0\t2929\t18\n1.0\t51\t1\n1.0\t1180\t21\n1.0\t1067\t8\n1.0\t1969\t15\n1.0\t1066\t22\n1.0\t1472\t10\n1.0\t1068\t7\n1.0\t2309\t16\n1.0\t518\t6\n1.0\t106\t0\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607397_-1870262134","id":"20170524-095127_757444423","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6537"},{"title":"Count of Departure Delays by Origin","text":"%sql\nselect origin, count(depdelay)\nfrom flights where depdelay > 40\ngroup by origin\nORDER BY origin","user":"anonymous","dateUpdated":"2019-03-06T20:13:33+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"origin","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count(depdelay)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"origin\tcount(depdelay)\nATL\t637\nBOS\t296\nDEN\t484\nEWR\t518\nIAH\t447\nLGA\t432\nMIA\t429\nORD\t679\nSFO\t542\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607397_1956128635","id":"20171123-101839_1671246939","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6538"},{"title":"Count of Departure Delays by Origin","text":"%sql\nSELECT delayed, count(delayed),src\nFROM flights\nGROUP BY src, delayed\norder by  src\n","user":"anonymous","dateUpdated":"2019-03-06T20:13:33+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"pieChart":{},"multiBarChart":{"stacked":false,"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"src","index":2,"aggr":"sum"}],"groups":[{"name":"delayed","index":0,"aggr":"sum"}],"values":[{"name":"count(delayed)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"delayed\tcount(delayed)\tsrc\n1.0\t3106\tATL\n0.0\t27059\tATL\n1.0\t1711\tBOS\n0.0\t16872\tBOS\n1.0\t1755\tCLT\n0.0\t14953\tCLT\n1.0\t2304\tDEN\n0.0\t21106\tDEN\n0.0\t22190\tDFW\n1.0\t2782\tDFW\n1.0\t2328\tEWR\n0.0\t16323\tEWR\n0.0\t15845\tIAH\n1.0\t1829\tIAH\n1.0\t2126\tLAX\n0.0\t24738\tLAX\n0.0\t18538\tLGA\n1.0\t1944\tLGA\n1.0\t2294\tMIA\n0.0\t15695\tMIA\n0.0\t28039\tORD\n1.0\t4033\tORD\n0.0\t11851\tSEA\n1.0\t846\tSEA\n1.0\t2261\tSFO\n0.0\t20100\tSFO\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607398_-1895281794","id":"20171110-211045_792848918","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6539"},{"title":"Count of Departure Delays by Destination","text":"%sql\nselect dst, count(delayed)\nfrom flights where delayed = 1\ngroup by dst\nORDER BY dst\n","user":"anonymous","dateUpdated":"2019-03-06T20:13:33+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"dst","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count(delayed)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"dst\tcount(delayed)\nATL\t2759\nBOS\t2078\nCLT\t1390\nDEN\t2171\nDFW\t2471\nEWR\t2796\nIAH\t1468\nLAX\t2480\nLGA\t2363\nMIA\t1741\nORD\t3465\nSEA\t1191\nSFO\t2946\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607398_1458508719","id":"20171123-102221_687729087","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6540"},{"title":"Count of Delayed not Delayed by Destination","text":"%sql\nSELECT delayed, count(delayed),dst\nFROM flights\nGROUP BY dst, delayed\norder by dst","user":"anonymous","dateUpdated":"2019-03-06T20:13:33+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"dst","index":2,"aggr":"sum"}],"groups":[{"name":"delayed","index":0,"aggr":"sum"}],"values":[{"name":"count(delayed)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"delayed\tcount(delayed)\tdst\n1.0\t2759\tATL\n0.0\t27458\tATL\n0.0\t16612\tBOS\n1.0\t2078\tBOS\n1.0\t1390\tCLT\n0.0\t15409\tCLT\n1.0\t2171\tDEN\n0.0\t21031\tDEN\n0.0\t22476\tDFW\n1.0\t2471\tDFW\n0.0\t15740\tEWR\n1.0\t2796\tEWR\n1.0\t1468\tIAH\n0.0\t16073\tIAH\n0.0\t24389\tLAX\n1.0\t2480\tLAX\n1.0\t2363\tLGA\n0.0\t18071\tLGA\n0.0\t16262\tMIA\n1.0\t1741\tMIA\n1.0\t3465\tORD\n0.0\t28849\tORD\n0.0\t11535\tSEA\n1.0\t1191\tSEA\n1.0\t2946\tSFO\n0.0\t19404\tSFO\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607398_1344243244","id":"20171122-211508_2036968500","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6541"},{"title":"Count of Departure Delays by Origin, Destination","text":"%sql\nselect src, dst, count(depdelay)\nfrom flights where depdelay > 40\ngroup by src, dst\nORDER BY count(depdelay) desc\n","user":"anonymous","dateUpdated":"2019-03-06T20:13:33+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"src","index":0,"aggr":"sum"}],"groups":[{"name":"dst","index":1,"aggr":"sum"}],"values":[{"name":"count(depdelay)","index":2,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"src\tdst\tcount(depdelay)\nORD\tLGA\t588\nLAX\tSFO\t578\nATL\tEWR\t561\nLGA\tORD\t532\nORD\tSFO\t470\nSFO\tLAX\t463\nATL\tLGA\t445\nORD\tLAX\t425\nORD\tDFW\t423\nDEN\tSFO\t388\nEWR\tATL\t381\nDFW\tORD\t377\nMIA\tLGA\t355\nORD\tEWR\t347\nLGA\tATL\t344\nSFO\tORD\t343\nDFW\tATL\t328\nORD\tATL\t326\nORD\tBOS\t318\nDEN\tLAX\t311\nLAX\tDEN\t303\nORD\tDEN\t302\nSFO\tDEN\t299\nMIA\tATL\t299\nLAX\tORD\t298\nEWR\tORD\t297\nATL\tDFW\t293\nBOS\tLGA\t279\nLGA\tBOS\t276\nDEN\tEWR\t275\nATL\tLAX\t275\nATL\tORD\t273\nBOS\tEWR\t269\nDFW\tSFO\t269\nIAH\tEWR\t269\nBOS\tORD\t267\nDEN\tORD\t265\nIAH\tDFW\t264\nMIA\tORD\t262\nMIA\tDFW\t259\nEWR\tSFO\t257\nATL\tMIA\t255\nEWR\tBOS\t255\nCLT\tEWR\t255\nDFW\tIAH\t255\nLGA\tMIA\t248\nATL\tBOS\t243\nORD\tSEA\t232\nDFW\tDEN\t222\nORD\tIAH\t217\nDFW\tMIA\t217\nDFW\tLAX\t216\nDFW\tLGA\t214\nSFO\tEWR\t214\nCLT\tORD\t213\nORD\tMIA\t212\nEWR\tLAX\t202\nSFO\tDFW\t202\nLAX\tATL\t201\nMIA\tEWR\t201\nDFW\tEWR\t200\nIAH\tSFO\t199\nDEN\tDFW\t198\nMIA\tLAX\t198\nBOS\tATL\t198\nSFO\tSEA\t196\nATL\tDEN\t192\nSEA\tSFO\t191\nIAH\tORD\t189\nEWR\tMIA\t188\nCLT\tATL\t186\nDFW\tCLT\t185\nATL\tSFO\t185\nDEN\tLGA\t184\nLGA\tDEN\t182\nCLT\tBOS\t181\nEWR\tDEN\t178\nMIA\tBOS\t178\nEWR\tIAH\t177\nDFW\tSEA\t174\nLAX\tDFW\t174\nMIA\tCLT\t174\nORD\tCLT\t173\nATL\tCLT\t170\nSFO\tBOS\t165\nMIA\tSFO\t164\nDEN\tATL\t164\nLGA\tDFW\t162\nEWR\tCLT\t162\nEWR\tDFW\t159\nDEN\tSEA\t155\nCLT\tDFW\t155\nIAH\tLGA\t151\nSEA\tORD\t149\nCLT\tLGA\t147\nCLT\tMIA\t144\nLAX\tEWR\t140\nIAH\tDEN\t139\nIAH\tLAX\t136\nIAH\tATL\t136\nSFO\tATL\t128\nSEA\tDEN\t126\nLAX\tMIA\t126\nDFW\tBOS\t125\nCLT\tSFO\t125\nATL\tIAH\t124\nLGA\tCLT\t124\nMIA\tIAH\t123\nSFO\tIAH\t122\nDEN\tIAH\t120\nBOS\tSFO\t120\nBOS\tCLT\t116\nLAX\tBOS\t114\nBOS\tLAX\t113\nDEN\tBOS\t112\nCLT\tDEN\t106\nBOS\tMIA\t97\nSEA\tDFW\t97\nIAH\tMIA\t94\nCLT\tLAX\t93\nATL\tSEA\t90\nIAH\tBOS\t90\nIAH\tCLT\t86\nCLT\tIAH\t86\nBOS\tDFW\t85\nBOS\tDEN\t81\nLGA\tIAH\t76\nIAH\tSEA\t76\nEWR\tSEA\t72\nSFO\tMIA\t70\nLAX\tSEA\t69\nSEA\tATL\t68\nDEN\tCLT\t67\nLAX\tCLT\t65\nDEN\tMIA\t65\nSEA\tEWR\t65\nCLT\tSEA\t64\nBOS\tIAH\t63\nSFO\tCLT\t59\nLAX\tIAH\t58\nSEA\tLAX\t48\nSEA\tIAH\t47\nMIA\tDEN\t41\nMIA\tSEA\t40\nSEA\tMIA\t25\nBOS\tSEA\t23\nSEA\tBOS\t21\nSEA\tCLT\t9\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1551901607399_1481271199","id":"20171123-102627_1669385618","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6542"},{"title":"Evaluate the predictions accuracy","text":"\nval areaUnderROC = evaluator.evaluate(predictions)\nprintln(\"areaUnderROC \"  + areaUnderROC)\n","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"areaUnderROC 0.6945482322554366\nareaUnderROC: Double = 0.6945482322554366\n"}]},"apps":[],"jobName":"paragraph_1551901607404_-681005839","id":"20170602-155622_1453197792","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6556"},{"title":"Calculate some more metrics","text":"val lp = predictions.select( \"label\", \"prediction\")\nval counttotal = predictions.count()\nval correct = lp.filter($\"label\" === $\"prediction\").count()\nval wrong = lp.filter(not($\"label\" === $\"prediction\")).count()\nval truep =( lp.filter($\"prediction\" === 0.0).filter($\"label\" === $\"prediction\").count()) /counttotal.toDouble\nval truen = (lp.filter($\"prediction\" === 1.0).filter($\"label\" === $\"prediction\").count())/counttotal.toDouble\nval falsen = (lp.filter($\"prediction\" === 0.0).filter(not($\"label\" === $\"prediction\")).count())/counttotal.toDouble\nval falsep = (lp.filter($\"prediction\" === 1.0).filter(not($\"label\" === $\"prediction\")).count())/counttotal.toDouble\nval ratioWrong=wrong.toDouble/counttotal.toDouble\nval ratioCorrect=correct.toDouble/counttotal.toDouble\n\nval precision = truep / (truep + falsep)\nval recall = truep / (truep + falsen)\nval fmeasure = 2 * precision * recall / (precision + recall)","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"lp: org.apache.spark.sql.DataFrame = [label: double, prediction: double]\ncounttotal: Long = 41348\ncorrect: Long = 25286\nwrong: Long = 16062\ntruep: Double = 0.5360839702041211\ntruen: Double = 0.0754570958692077\nfalsen: Double = 0.03477798200638483\nfalsep: Double = 0.35368095192028637\nratioWrong: Double = 0.3884589339266712\nratioCorrect: Double = 0.6115410660733288\nprecision: Double = 0.6025006795324817\nrecall: Double = 0.9390781223521437\nfmeasure: Double = 0.7340464284531576\n"}]},"apps":[],"jobName":"paragraph_1551901607405_241431608","id":"20181015-224231_2027590368","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6557"},{"text":"predictions.select(\"label\",\"prediction\",\"crsdephour\").show","user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+----------+----------+\n|label|prediction|crsdephour|\n+-----+----------+----------+\n|  0.0|       0.0|        11|\n|  0.0|       0.0|        13|\n|  0.0|       0.0|        14|\n|  0.0|       1.0|        16|\n|  0.0|       1.0|        18|\n|  0.0|       1.0|        19|\n|  0.0|       0.0|        22|\n|  0.0|       0.0|         9|\n|  0.0|       0.0|        10|\n|  0.0|       0.0|        11|\n|  0.0|       0.0|        13|\n|  0.0|       0.0|        14|\n|  0.0|       0.0|        14|\n|  0.0|       0.0|        15|\n|  1.0|       1.0|        16|\n|  1.0|       1.0|        18|\n|  0.0|       1.0|        19|\n|  1.0|       1.0|        21|\n|  0.0|       0.0|        22|\n|  0.0|       0.0|         7|\n+-----+----------+----------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1551901607406_191803872","id":"20171107-112947_525619195","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6560"},{"user":"anonymous","dateUpdated":"2019-03-06T19:46:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1551901607406_-2077890390","id":"20171122-091021_1615582434","dateCreated":"2019-03-06T19:46:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6561","text":"writedb.stop()"}],"name":"FlightStructuredStreaming","id":"2E76PQU18","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}